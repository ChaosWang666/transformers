#                🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨
#           This file was automatically generated from src/transformers/models/qwen2_5_vl/modular_qwen2_5_vl.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_qwen2_5_vl.py file directly. One of our CI enforces this.
#                🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨
# coding=utf-8
# Copyright 2025 The Qwen Team and The HuggingFace Inc. team. All rights reserved.
#
# This code is based on EleutherAI's GPT-NeoX library and the GPT-NeoX
# and OPT implementations in this library. It has been modified from its
# original forms to accommodate minor architectural differences compared
# to GPT-NeoX and OPT used by the Meta AI team that trained the model.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from dataclasses import dataclass
from typing import Any, Callable, Optional, Union

import torch
import torch.nn as nn
import torch.nn.functional as F

from ...activations import ACT2FN
from ...cache_utils import Cache, StaticCache, DynamicCache
from ...generation import GenerationMixin
from ...masking_utils import create_causal_mask, create_sliding_window_causal_mask
from ...modeling_flash_attention_utils import FlashAttentionKwargs
from ...modeling_layers import GradientCheckpointingLayer
from ...modeling_outputs import BaseModelOutputWithPast, ModelOutput
from ...modeling_rope_utils import ROPE_INIT_FUNCTIONS, dynamic_rope_update
from ...modeling_utils import ALL_ATTENTION_FUNCTIONS, PreTrainedModel
from ...processing_utils import Unpack
from ...utils import TransformersKwargs, auto_docstring, can_return_tuple, is_torchdynamo_compiling, logging
from ...utils.deprecation import deprecate_kwarg
from .configuration_qwen2_5_vl import Qwen2_5_VLConfig, Qwen2_5_VLTextConfig, Qwen2_5_VLVisionConfig


logger = logging.get_logger(__name__)


class Qwen2_5_VLMLP(nn.Module):
    """
    Qwen2.5-VL 多层感知机（MLP）模块。
    
    实现标准的 SwiGLU 激活函数的前馈网络，包含门控机制。
    这是 Transformer 块中的前馈网络组件。
    
    Args:
        config: 模型配置对象
        bias (bool): 是否在线性层中使用偏置，默认 False
    """
    def __init__(self, config, bias: bool = False):
        super().__init__()
        self.hidden_size = config.hidden_size
        self.intermediate_size = config.intermediate_size
        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=bias)
        self.up_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=bias)
        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size, bias=bias)
        self.act_fn = ACT2FN[config.hidden_act]

    def forward(self, hidden_state):
        return self.down_proj(self.act_fn(self.gate_proj(hidden_state)) * self.up_proj(hidden_state))


class Qwen2_5_VisionPatchEmbed(nn.Module):
    """
    Qwen2.5-VL 视觉块嵌入模块。
    
    将输入的图像或视频块转换为嵌入向量。使用 3D 卷积处理时空信息，
    支持图像（时间维度为1）和视频（时间维度>1）输入。
    
    Args:
        patch_size (int): 空间块大小，默认 14
        temporal_patch_size (int): 时间块大小，默认 2
        in_channels (int): 输入通道数，默认 3（RGB）
        embed_dim (int): 嵌入维度，默认 1152
    """
    def __init__(
        self,
        patch_size: int = 14,
        temporal_patch_size: int = 2,
        in_channels: int = 3,
        embed_dim: int = 1152,
    ) -> None:
        super().__init__()
        self.patch_size = patch_size
        self.temporal_patch_size = temporal_patch_size
        self.in_channels = in_channels
        self.embed_dim = embed_dim

        kernel_size = [temporal_patch_size, patch_size, patch_size]
        self.proj = nn.Conv3d(in_channels, embed_dim, kernel_size=kernel_size, stride=kernel_size, bias=False)

    def forward(self, hidden_states: torch.Tensor) -> torch.Tensor:
        target_dtype = self.proj.weight.dtype
        hidden_states = hidden_states.view(
            -1, self.in_channels, self.temporal_patch_size, self.patch_size, self.patch_size
        )
        hidden_states = self.proj(hidden_states.to(dtype=target_dtype)).view(-1, self.embed_dim)
        return hidden_states


class Qwen2_5_VisionRotaryEmbedding(nn.Module):
    """
    Qwen2.5-VL 视觉旋转位置编码模块。
    
    为视觉 Transformer 生成旋转位置编码（RoPE），用于编码位置信息。
    
    Args:
        dim (int): 嵌入维度
        theta (float): RoPE 的基础频率，默认 10000.0
    """
    inv_freq: torch.Tensor  # fix linting for `register_buffer`

    def __init__(self, dim: int, theta: float = 10000.0) -> None:
        super().__init__()
        inv_freq = 1.0 / (theta ** (torch.arange(0, dim, 2, dtype=torch.float) / dim))
        self.register_buffer("inv_freq", inv_freq, persistent=False)

    def forward(self, seqlen: int) -> torch.Tensor:
        seq = torch.arange(seqlen, device=self.inv_freq.device, dtype=self.inv_freq.dtype)
        freqs = torch.outer(seq, self.inv_freq)
        return freqs


class Qwen2RMSNorm(nn.Module):
    """
    Qwen2 RMS 归一化层。
    
    实现 Root Mean Square 归一化，等价于 T5LayerNorm。
    用于稳定训练和提高模型性能。
    
    Args:
        hidden_size (int): 隐藏层维度
        eps (float): 数值稳定性的小常数，默认 1e-6
    """
    def __init__(self, hidden_size, eps=1e-6):
        super().__init__()
        self.weight = nn.Parameter(torch.ones(hidden_size))
        self.variance_epsilon = eps

    def forward(self, hidden_states):
        input_dtype = hidden_states.dtype
        hidden_states = hidden_states.to(torch.float32)
        variance = hidden_states.pow(2).mean(-1, keepdim=True)
        hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
        return self.weight * hidden_states.to(input_dtype)

    def extra_repr(self):
        return f"{tuple(self.weight.shape)}, eps={self.variance_epsilon}"


class Qwen2_5_VLPatchMerger(nn.Module):
    """
    Qwen2.5-VL 块合并器。
    
    将多个相邻的视觉块合并为单个块，以减少序列长度并提高计算效率。
    使用 MLP 网络进行特征变换和维度调整。
    
    Args:
        dim (int): 输出维度
        context_dim (int): 输入上下文维度
        spatial_merge_size (int): 空间合并大小，默认 2（即 2x2 合并）
    """
    def __init__(self, dim: int, context_dim: int, spatial_merge_size: int = 2) -> None:
        super().__init__()
        self.hidden_size = context_dim * (spatial_merge_size**2)
        self.ln_q = Qwen2RMSNorm(context_dim, eps=1e-6)
        self.mlp = nn.Sequential(
            nn.Linear(self.hidden_size, self.hidden_size),
            nn.GELU(),
            nn.Linear(self.hidden_size, dim),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.mlp(self.ln_q(x).view(-1, self.hidden_size))
        return x


def rotate_half(x):
    """
    旋转输入张量的一半隐藏维度。
    
    这是旋转位置编码（RoPE）的核心操作，将输入张量的后半部分取负号并与前半部分交换位置。
    用于实现复数乘法的旋转操作。
    
    Args:
        x (torch.Tensor): 输入张量，shape: (..., hidden_dim)
    
    Returns:
        torch.Tensor: 旋转后的张量，shape 与输入相同
    
    示例:
        如果输入 x = [a, b, c, d]，则输出为 [-c, -d, a, b]
    """
    x1 = x[..., : x.shape[-1] // 2]  # 前半部分
    x2 = x[..., x.shape[-1] // 2 :]  # 后半部分
    return torch.cat((-x2, x1), dim=-1)  # 拼接：(-后半部分, 前半部分)


def apply_rotary_pos_emb_vision(
    q: torch.Tensor, k: torch.Tensor, cos: torch.Tensor, sin: torch.Tensor
) -> tuple[torch.Tensor, torch.Tensor]:
    """
    为视觉模型的查询和键张量应用旋转位置编码（RoPE）。
    
    旋转位置编码通过复数乘法的方式将位置信息编码到查询和键向量中，
    使模型能够理解序列中元素的相对位置关系。对于视觉模型，这有助于
    理解图像块之间的空间关系。
    
    Args:
        q (torch.Tensor): 查询张量，shape: (batch_size, num_heads, seq_len, head_dim)
        k (torch.Tensor): 键张量，shape: (batch_size, num_heads, seq_len, head_dim)
        cos (torch.Tensor): 余弦位置编码，shape: (seq_len, head_dim)
        sin (torch.Tensor): 正弦位置编码，shape: (seq_len, head_dim)
    
    Returns:
        tuple[torch.Tensor, torch.Tensor]: 应用 RoPE 后的查询和键张量
            - q_embed: 编码后的查询张量
            - k_embed: 编码后的键张量
    
    注意:
        计算过程中会转换为 float32 以提高数值稳定性，最后恢复原始数据类型。
    """
    # 保存原始数据类型
    orig_q_dtype = q.dtype
    orig_k_dtype = k.dtype
    
    # 转换为 float32 以提高数值稳定性
    q, k = q.float(), k.float()
    cos, sin = cos.unsqueeze(-2).float(), sin.unsqueeze(-2).float()  # 增加 head 维度
    
    # 应用旋转位置编码：复数乘法的实数形式
    # q_embed = q * cos + rotate_half(q) * sin
    q_embed = (q * cos) + (rotate_half(q) * sin)
    k_embed = (k * cos) + (rotate_half(k) * sin)
    
    # 恢复原始数据类型
    q_embed = q_embed.to(orig_q_dtype)
    k_embed = k_embed.to(orig_k_dtype)
    
    return q_embed, k_embed


def repeat_kv(hidden_states: torch.Tensor, n_rep: int) -> torch.Tensor:
    """
    重复键值对张量以匹配查询头的数量。
    
    在分组查询注意力（GQA）中，键值对头的数量通常少于查询头的数量。
    此函数通过重复键值对张量来匹配查询头的数量，实现高效的注意力计算。
    
    等价于 torch.repeat_interleave(x, dim=1, repeats=n_rep)。
    
    Args:
        hidden_states (torch.Tensor): 输入的键或值张量
            shape: (batch, num_key_value_heads, seqlen, head_dim)
        n_rep (int): 重复次数，通常等于 num_attention_heads // num_key_value_heads
    
    Returns:
        torch.Tensor: 重复后的张量
            shape: (batch, num_attention_heads, seqlen, head_dim)
    
    示例:
        如果 num_key_value_heads=2, num_attention_heads=8，则 n_rep=4
        输入 shape: (batch, 2, seqlen, head_dim)
        输出 shape: (batch, 8, seqlen, head_dim)
    """
    batch, num_key_value_heads, slen, head_dim = hidden_states.shape
    
    # 如果不需要重复，直接返回
    if n_rep == 1:
        return hidden_states
    
    # 在第3维插入新维度并扩展，然后重塑为目标形状
    # (batch, num_kv_heads, 1, slen, head_dim) -> (batch, num_kv_heads, n_rep, slen, head_dim)
    hidden_states = hidden_states[:, :, None, :, :].expand(batch, num_key_value_heads, n_rep, slen, head_dim)
    
    # 重塑为最终形状: (batch, num_kv_heads * n_rep, slen, head_dim)
    return hidden_states.reshape(batch, num_key_value_heads * n_rep, slen, head_dim)


def eager_attention_forward(
    module: nn.Module,
    query: torch.Tensor,
    key: torch.Tensor,
    value: torch.Tensor,
    attention_mask: Optional[torch.Tensor],
    scaling: float,
    dropout: float = 0.0,
    **kwargs,
):
    """
    执行标准的多头注意力前向传播（eager 模式）。
    
    实现标准的缩放点积注意力机制，支持分组查询注意力（GQA）。
    使用 PyTorch 的标准操作进行计算，相对于优化的实现（如 Flash Attention）
    更容易调试但可能效率较低。
    
    Args:
        module (nn.Module): 注意力模块，用于获取配置信息
        query (torch.Tensor): 查询张量，shape: (batch, num_heads, seq_len, head_dim)
        key (torch.Tensor): 键张量，shape: (batch, num_kv_heads, seq_len, head_dim)
        value (torch.Tensor): 值张量，shape: (batch, num_kv_heads, seq_len, head_dim)
        attention_mask (Optional[torch.Tensor]): 注意力掩码，用于屏蔽某些位置
        scaling (float): 缩放因子，通常为 1/sqrt(head_dim)
        dropout (float): dropout 概率，默认 0.0
        **kwargs: 其他参数（未使用）
    
    Returns:
        tuple[torch.Tensor, torch.Tensor]: 
            - attn_output: 注意力输出，shape: (batch, seq_len, num_heads, head_dim)
            - attn_weights: 注意力权重，shape: (batch, num_heads, seq_len, seq_len)
    
    计算流程:
        1. 重复键值对以匹配查询头数量（用于 GQA）
        2. 计算注意力分数：Q @ K^T * scaling
        3. 应用注意力掩码
        4. Softmax 归一化
        5. 应用 dropout
        6. 计算最终输出：attention_weights @ V
    """
    # 1. 重复键值对张量以匹配查询头数量（用于分组查询注意力）
    key_states = repeat_kv(key, module.num_key_value_groups)
    value_states = repeat_kv(value, module.num_key_value_groups)

    # 2. 计算注意力分数：Q @ K^T，并应用缩放因子
    # attn_weights: (batch, num_heads, seq_len, seq_len)
    attn_weights = torch.matmul(query, key_states.transpose(2, 3)) * scaling
    
    # 3. 应用注意力掩码（如果提供）
    if attention_mask is not None:
        # 裁剪掩码以匹配键的序列长度
        causal_mask = attention_mask[:, :, :, : key_states.shape[-2]]
        attn_weights = attn_weights + causal_mask  # 加法掩码（负无穷表示屏蔽）

    # 4. Softmax 归一化（使用 float32 提高数值稳定性）
    attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
    
    # 5. 应用 dropout
    attn_weights = nn.functional.dropout(attn_weights, p=dropout, training=module.training)
    
    # 6. 计算最终输出：attention_weights @ V
    # attn_output: (batch, num_heads, seq_len, head_dim)
    attn_output = torch.matmul(attn_weights, value_states)
    
    # 7. 转置以匹配期望的输出格式：(batch, seq_len, num_heads, head_dim)
    attn_output = attn_output.transpose(1, 2).contiguous()

    return attn_output, attn_weights


class Qwen2_5_VLVisionAttention(nn.Module):
    """
    Qwen2.5-VL 视觉注意力模块。
    
    实现多头自注意力机制，支持旋转位置编码和多种注意力实现方式。
    可以处理变长序列并支持 Flash Attention 等优化实现。
    
    Args:
        config (Qwen2_5_VLVisionConfig): 视觉配置对象
    """
    def __init__(self, config: Qwen2_5_VLVisionConfig) -> None:
        super().__init__()
        self.dim = config.hidden_size
        self.num_heads = config.num_heads
        self.head_dim = self.dim // self.num_heads
        self.num_key_value_groups = 1  # needed for eager attention
        self.qkv = nn.Linear(self.dim, self.dim * 3, bias=True)
        self.proj = nn.Linear(self.dim, self.dim)
        self.scaling = self.head_dim**-0.5
        self.config = config
        self.attention_dropout = 0.0
        self.is_causal = False

    def forward(
        self,
        hidden_states: torch.Tensor,
        cu_seqlens: torch.Tensor,
        rotary_pos_emb: Optional[torch.Tensor] = None,
        position_embeddings: Optional[tuple[torch.Tensor, torch.Tensor]] = None,
        **kwargs,
    ) -> torch.Tensor:
        seq_length = hidden_states.shape[0]
        query_states, key_states, value_states = (
            self.qkv(hidden_states).reshape(seq_length, 3, self.num_heads, -1).permute(1, 0, 2, 3).unbind(0)
        )
        if position_embeddings is None:
            logger.warning_once(
                "The attention layers in this model are transitioning from computing the RoPE embeddings internally "
                "through `rotary_pos_emb` (2D tensor of RoPE theta values), to using externally computed "
                "`position_embeddings` (Tuple of tensors, containing cos and sin). In v4.54 `rotary_pos_emb` will be "
                "removed and `position_embeddings` will be mandatory."
            )
            emb = torch.cat((rotary_pos_emb, rotary_pos_emb), dim=-1)
            cos = emb.cos()
            sin = emb.sin()
        else:
            cos, sin = position_embeddings
        query_states, key_states = apply_rotary_pos_emb_vision(query_states, key_states, cos, sin)

        query_states = query_states.transpose(0, 1).unsqueeze(0)
        key_states = key_states.transpose(0, 1).unsqueeze(0)
        value_states = value_states.transpose(0, 1).unsqueeze(0)

        attention_interface: Callable = eager_attention_forward
        if self.config._attn_implementation != "eager":
            attention_interface = ALL_ATTENTION_FUNCTIONS[self.config._attn_implementation]

        if self.config._attn_implementation == "flash_attention_2":
            # Flash Attention 2: Use cu_seqlens for variable length attention
            max_seqlen = (cu_seqlens[1:] - cu_seqlens[:-1]).max()
            attn_output, _ = attention_interface(
                self,
                query_states,
                key_states,
                value_states,
                attention_mask=None,
                scaling=self.scaling,
                dropout=0.0 if not self.training else self.attention_dropout,
                cu_seq_lens_q=cu_seqlens,
                cu_seq_lens_k=cu_seqlens,
                max_length_q=max_seqlen,
                max_length_k=max_seqlen,
                is_causal=False,
                **kwargs,
            )
        else:
            # Other implementations: Process each chunk separately
            lengths = cu_seqlens[1:] - cu_seqlens[:-1]
            splits = [
                torch.split(tensor, lengths.tolist(), dim=2) for tensor in (query_states, key_states, value_states)
            ]

            attn_outputs = [
                attention_interface(
                    self,
                    q,
                    k,
                    v,
                    attention_mask=None,
                    scaling=self.scaling,
                    dropout=0.0 if not self.training else self.attention_dropout,
                    is_causal=False,
                    **kwargs,
                )[0]
                for q, k, v in zip(*splits)
            ]
            attn_output = torch.cat(attn_outputs, dim=1)

        attn_output = attn_output.reshape(seq_length, -1).contiguous()
        attn_output = self.proj(attn_output)
        return attn_output


class Qwen2_5_VLVisionBlock(GradientCheckpointingLayer):
    """
    Qwen2.5-VL 视觉 Transformer 块。
    
    包含多头自注意力和前馈网络，使用残差连接和 RMS 归一化。
    支持梯度检查点以节省内存，可配置不同的注意力实现方式。
    
    Args:
        config: 视觉配置对象
        attn_implementation (str): 注意力实现方式，默认 "sdpa"
    """
    def __init__(self, config, attn_implementation: str = "sdpa") -> None:
        super().__init__()
        self.norm1 = Qwen2RMSNorm(config.hidden_size, eps=1e-6)
        self.norm2 = Qwen2RMSNorm(config.hidden_size, eps=1e-6)
        self.attn = Qwen2_5_VLVisionAttention(config=config)
        self.mlp = Qwen2_5_VLMLP(config, bias=True)

    def forward(
        self,
        hidden_states: torch.Tensor,
        cu_seqlens: torch.Tensor,
        rotary_pos_emb: Optional[torch.Tensor] = None,
        position_embeddings: Optional[tuple[torch.Tensor, torch.Tensor]] = None,
        **kwargs,
    ) -> torch.Tensor:
        hidden_states = hidden_states + self.attn(
            self.norm1(hidden_states),
            cu_seqlens=cu_seqlens,
            rotary_pos_emb=rotary_pos_emb,
            position_embeddings=position_embeddings,
            **kwargs,
        )
        hidden_states = hidden_states + self.mlp(self.norm2(hidden_states))
        return hidden_states


@auto_docstring
class Qwen2_5_VLPreTrainedModel(PreTrainedModel):
    config: Qwen2_5_VLConfig
    base_model_prefix = "model"
    supports_gradient_checkpointing = True
    _no_split_modules = ["Qwen2_5_VLDecoderLayer", "Qwen2_5_VLVisionBlock"]
    _skip_keys_device_placement = "past_key_values"
    _supports_flash_attn = True
    _supports_sdpa = True

    _can_compile_fullgraph = True
    _supports_attention_backend = True


class Qwen2_5_VisionTransformerPretrainedModel(Qwen2_5_VLPreTrainedModel):
    """
    Qwen2.5-VL 视觉 Transformer 预训练模型。
    
    实现完整的视觉编码器，包括图像/视频块嵌入、旋转位置编码、
    多层 Transformer 块和空间块合并。支持任意分辨率图像和变长视频处理。
    
    主要组件：
    - 块嵌入：将图像/视频块转换为嵌入向量
    - 旋转位置编码：提供 3D 位置信息
    - Transformer 块：多层自注意力和前馈网络
    - 块合并器：减少序列长度提高效率
    
    Args:
        config (Qwen2_5_VLVisionConfig): 视觉配置对象
    """
    config: Qwen2_5_VLVisionConfig
    _no_split_modules = ["Qwen2_5_VLVisionBlock"]

    def __init__(self, config, *inputs, **kwargs) -> None:
        super().__init__(config, *inputs, **kwargs)
        self.spatial_merge_size = config.spatial_merge_size
        self.patch_size = config.patch_size
        self.fullatt_block_indexes = config.fullatt_block_indexes
        self.window_size = config.window_size
        self.spatial_merge_unit = self.spatial_merge_size * self.spatial_merge_size

        self.patch_embed = Qwen2_5_VisionPatchEmbed(
            patch_size=config.patch_size,
            temporal_patch_size=config.temporal_patch_size,
            in_channels=config.in_channels,
            embed_dim=config.hidden_size,
        )

        head_dim = config.hidden_size // config.num_heads
        self.rotary_pos_emb = Qwen2_5_VisionRotaryEmbedding(head_dim // 2)

        self.blocks = nn.ModuleList([Qwen2_5_VLVisionBlock(config) for _ in range(config.depth)])
        self.merger = Qwen2_5_VLPatchMerger(
            dim=config.out_hidden_size,
            context_dim=config.hidden_size,
            spatial_merge_size=config.spatial_merge_size,
        )
        self.gradient_checkpointing = False

    def rot_pos_emb(self, grid_thw):
        pos_ids = []
        for t, h, w in grid_thw:
            hpos_ids = torch.arange(h).unsqueeze(1).expand(-1, w)
            hpos_ids = hpos_ids.reshape(
                h // self.spatial_merge_size,
                self.spatial_merge_size,
                w // self.spatial_merge_size,
                self.spatial_merge_size,
            )
            hpos_ids = hpos_ids.permute(0, 2, 1, 3)
            hpos_ids = hpos_ids.flatten()

            wpos_ids = torch.arange(w).unsqueeze(0).expand(h, -1)
            wpos_ids = wpos_ids.reshape(
                h // self.spatial_merge_size,
                self.spatial_merge_size,
                w // self.spatial_merge_size,
                self.spatial_merge_size,
            )
            wpos_ids = wpos_ids.permute(0, 2, 1, 3)
            wpos_ids = wpos_ids.flatten()
            pos_ids.append(torch.stack([hpos_ids, wpos_ids], dim=-1).repeat(t, 1))
        pos_ids = torch.cat(pos_ids, dim=0)
        max_grid_size = grid_thw[:, 1:].max()
        rotary_pos_emb_full = self.rotary_pos_emb(max_grid_size)
        rotary_pos_emb = rotary_pos_emb_full[pos_ids].flatten(1)
        return rotary_pos_emb

    def get_window_index(self, grid_thw):
        window_index: list = []
        cu_window_seqlens: list = [0]
        window_index_id = 0
        vit_merger_window_size = self.window_size // self.spatial_merge_size // self.patch_size

        for grid_t, grid_h, grid_w in grid_thw:
            llm_grid_h, llm_grid_w = (
                grid_h // self.spatial_merge_size,
                grid_w // self.spatial_merge_size,
            )
            index = torch.arange(grid_t * llm_grid_h * llm_grid_w).reshape(grid_t, llm_grid_h, llm_grid_w)
            pad_h = vit_merger_window_size - llm_grid_h % vit_merger_window_size
            pad_w = vit_merger_window_size - llm_grid_w % vit_merger_window_size
            num_windows_h = (llm_grid_h + pad_h) // vit_merger_window_size
            num_windows_w = (llm_grid_w + pad_w) // vit_merger_window_size
            index_padded = F.pad(index, (0, pad_w, 0, pad_h), "constant", -100)
            index_padded = index_padded.reshape(
                grid_t,
                num_windows_h,
                vit_merger_window_size,
                num_windows_w,
                vit_merger_window_size,
            )
            index_padded = index_padded.permute(0, 1, 3, 2, 4).reshape(
                grid_t,
                num_windows_h * num_windows_w,
                vit_merger_window_size,
                vit_merger_window_size,
            )
            seqlens = (index_padded != -100).sum([2, 3]).reshape(-1)
            index_padded = index_padded.reshape(-1)
            index_new = index_padded[index_padded != -100]
            window_index.append(index_new + window_index_id)
            cu_seqlens_tmp = seqlens.cumsum(0) * self.spatial_merge_unit + cu_window_seqlens[-1]
            cu_window_seqlens.extend(cu_seqlens_tmp.tolist())
            window_index_id += (grid_t * llm_grid_h * llm_grid_w).item()
        window_index = torch.cat(window_index, dim=0)

        return window_index, cu_window_seqlens

    def forward(self, hidden_states: torch.Tensor, grid_thw: torch.Tensor, **kwargs) -> torch.Tensor:
        """
        Args:
            hidden_states (`torch.Tensor` of shape `(seq_len, hidden_size)`):
                The final hidden states of the model.
            grid_thw (`torch.Tensor` of shape `(num_images_or_videos, 3)`):
                The temporal, height and width of feature shape of each image in LLM.

        Returns:
            `torch.Tensor`: hidden_states.
        """
        hidden_states = self.patch_embed(hidden_states)
        rotary_pos_emb = self.rot_pos_emb(grid_thw)
        window_index, cu_window_seqlens = self.get_window_index(grid_thw)
        cu_window_seqlens = torch.tensor(
            cu_window_seqlens,
            device=hidden_states.device,
            dtype=grid_thw.dtype if torch.jit.is_tracing() else torch.int32,
        )
        cu_window_seqlens = torch.unique_consecutive(cu_window_seqlens)

        seq_len, _ = hidden_states.size()
        hidden_states = hidden_states.reshape(seq_len // self.spatial_merge_unit, self.spatial_merge_unit, -1)
        hidden_states = hidden_states[window_index, :, :]
        hidden_states = hidden_states.reshape(seq_len, -1)
        rotary_pos_emb = rotary_pos_emb.reshape(seq_len // self.spatial_merge_unit, self.spatial_merge_unit, -1)
        rotary_pos_emb = rotary_pos_emb[window_index, :, :]
        rotary_pos_emb = rotary_pos_emb.reshape(seq_len, -1)
        emb = torch.cat((rotary_pos_emb, rotary_pos_emb), dim=-1)
        position_embeddings = (emb.cos(), emb.sin())

        cu_seqlens = torch.repeat_interleave(grid_thw[:, 1] * grid_thw[:, 2], grid_thw[:, 0]).cumsum(
            dim=0,
            # Select dtype based on the following factors:
            #  - FA2 requires that cu_seqlens_q must have dtype int32
            #  - torch.onnx.export requires that cu_seqlens_q must have same dtype as grid_thw
            # See https://github.com/huggingface/transformers/pull/34852 for more information
            dtype=grid_thw.dtype if torch.jit.is_tracing() else torch.int32,
        )
        cu_seqlens = F.pad(cu_seqlens, (1, 0), value=0)

        for layer_num, blk in enumerate(self.blocks):
            if layer_num in self.fullatt_block_indexes:
                cu_seqlens_now = cu_seqlens
            else:
                cu_seqlens_now = cu_window_seqlens

            hidden_states = blk(
                hidden_states,
                cu_seqlens=cu_seqlens_now,
                position_embeddings=position_embeddings,
                **kwargs,
            )

        hidden_states = self.merger(hidden_states)
        reverse_indices = torch.argsort(window_index)
        hidden_states = hidden_states[reverse_indices, :]

        return hidden_states


@dataclass
@auto_docstring(
    custom_intro="""
    Base class for Llava outputs, with hidden states and attentions.
    """
)
class Qwen2_5_VLModelOutputWithPast(ModelOutput):
    r"""
    past_key_values (`Cache`, *optional*, returned when `use_cache=True` is passed or when `config.use_cache=True`):
        Tuple of `tuple(torch.FloatTensor)` of length `config.n_layers`, with each tuple having 2 tensors of shape
        `(batch_size, num_heads, sequence_length, embed_size_per_head)`)

        Contains pre-computed hidden-states (key and values in the self-attention blocks) that can be used (see
        `past_key_values` input) to speed up sequential decoding.
    rope_deltas (`torch.LongTensor` of shape `(batch_size, )`, *optional*):
        The rope index difference between sequence length and multimodal rope.
    """

    last_hidden_state: torch.FloatTensor = None
    past_key_values: Optional[list[torch.FloatTensor]] = None
    hidden_states: Optional[tuple[torch.FloatTensor]] = None
    attentions: Optional[tuple[torch.FloatTensor]] = None
    rope_deltas: Optional[torch.LongTensor] = None


class Qwen2_5_VLRotaryEmbedding(nn.Module):
    inv_freq: torch.Tensor  # fix linting for `register_buffer`

    def __init__(self, config: Qwen2_5_VLTextConfig, device=None):
        super().__init__()
        # BC: "rope_type" was originally "type"
        if hasattr(config, "rope_scaling") and config.rope_scaling is not None:
            self.rope_type = config.rope_scaling.get("rope_type", config.rope_scaling.get("type"))
        else:
            self.rope_type = "default"
        self.max_seq_len_cached = config.max_position_embeddings
        self.original_max_seq_len = config.max_position_embeddings

        self.config = config
        self.rope_init_fn = ROPE_INIT_FUNCTIONS[self.rope_type]

        inv_freq, self.attention_scaling = self.rope_init_fn(self.config, device)
        self.register_buffer("inv_freq", inv_freq, persistent=False)
        self.original_inv_freq = self.inv_freq

    @torch.no_grad()
    @dynamic_rope_update  # power user: used with advanced RoPE types (e.g. dynamic rope)
    def forward(self, x, position_ids):
        # In contrast to other models, Qwen2_5_VL has different position ids for the grids
        # So we expand the inv_freq to shape (3, ...)
        inv_freq_expanded = self.inv_freq[None, None, :, None].float().expand(3, position_ids.shape[1], -1, 1)
        position_ids_expanded = position_ids[:, :, None, :].float()  # shape (3, bs, 1, positions)

        device_type = x.device.type if isinstance(x.device.type, str) and x.device.type != "mps" else "cpu"
        with torch.autocast(device_type=device_type, enabled=False):  # Force float32
            freqs = (inv_freq_expanded.float() @ position_ids_expanded.float()).transpose(2, 3)
            emb = torch.cat((freqs, freqs), dim=-1)
            cos = emb.cos() * self.attention_scaling
            sin = emb.sin() * self.attention_scaling

        return cos.to(dtype=x.dtype), sin.to(dtype=x.dtype)


class Qwen2MLP(nn.Module):
    def __init__(self, config):
        super().__init__()
        self.config = config
        self.hidden_size = config.hidden_size
        self.intermediate_size = config.intermediate_size
        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)
        self.up_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)
        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size, bias=False)
        self.act_fn = ACT2FN[config.hidden_act]

    def forward(self, x):
        down_proj = self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))
        return down_proj


def apply_multimodal_rotary_pos_emb(q, k, cos, sin, mrope_section, unsqueeze_dim=1):
    """Applies Rotary Position Embedding with Multimodal Sections to the query and key tensors (https://qwenlm.github.io/blog/qwen2-vl/).

    Explanation:
        Multimodal 3D rotary position embedding is an extension to 1D rotary position embedding. The input embedding
        sequence contains vision (images / videos) embedding and text embedding or just contains text embedding. For
        vision embedding part, we apply rotary position embedding on temporal, height and width dimension separately.
        Here we split the channel dimension to 3 chunks for the temporal, height and width rotary position embedding.
        For text embedding part, we just apply 1D rotary position embedding. The three rotary position index (temporal,
        height and width) of text embedding is always the same, so the text embedding rotary position embedding has no
        difference with modern LLMs.

    Args:
        q (`torch.Tensor`): The query tensor.
        k (`torch.Tensor`): The key tensor.
        cos (`torch.Tensor`): The cosine part of the rotary embedding.
        sin (`torch.Tensor`): The sine part of the rotary embedding.
        position_ids (`torch.Tensor`):
            The position indices of the tokens corresponding to the query and key tensors. For example, this can be
            used to pass offsetted position ids when working with a KV-cache.
        mrope_section(`List(int)`):
            Multimodal rope section is for channel dimension of temporal, height and width in rope calculation.
        unsqueeze_dim (`int`, *optional*, defaults to 1):
            The 'unsqueeze_dim' argument specifies the dimension along which to unsqueeze cos[position_ids] and
            sin[position_ids] so that they can be properly broadcasted to the dimensions of q and k. For example, note
            that cos[position_ids] and sin[position_ids] have the shape [batch_size, seq_len, head_dim]. Then, if q and
            k have the shape [batch_size, heads, seq_len, head_dim], then setting unsqueeze_dim=1 makes
            cos[position_ids] and sin[position_ids] broadcastable to the shapes of q and k. Similarly, if q and k have
            the shape [batch_size, seq_len, heads, head_dim], then set unsqueeze_dim=2.
    Returns:
        `tuple(torch.Tensor)` comprising of the query and key tensors rotated using the Rotary Position Embedding.
    """
    mrope_section = mrope_section * 2
    cos = torch.cat([m[i % 3] for i, m in enumerate(cos.split(mrope_section, dim=-1))], dim=-1).unsqueeze(
        unsqueeze_dim
    )
    sin = torch.cat([m[i % 3] for i, m in enumerate(sin.split(mrope_section, dim=-1))], dim=-1).unsqueeze(
        unsqueeze_dim
    )

    q_embed = (q * cos) + (rotate_half(q) * sin)
    k_embed = (k * cos) + (rotate_half(k) * sin)
    return q_embed, k_embed


class Qwen2_5_VLAttention(nn.Module):
    """
    Multi-headed attention from 'Attention Is All You Need' paper. Modified to use sliding window attention: Longformer
    and "Generating Long Sequences with Sparse Transformers".
    """

    def __init__(self, config: Qwen2_5_VLTextConfig, layer_idx: Optional[int] = None):
        super().__init__()
        self.config = config
        self.layer_idx = layer_idx
        if layer_idx is None:
            logger.warning_once(
                f"Instantiating {self.__class__.__name__} without passing `layer_idx` is not recommended and will "
                "to errors during the forward call, if caching is used. Please make sure to provide a `layer_idx` "
                "when creating this class."
            )

        self.hidden_size = config.hidden_size
        self.num_heads = config.num_attention_heads
        self.head_dim = self.hidden_size // self.num_heads
        self.num_key_value_heads = config.num_key_value_heads
        self.num_key_value_groups = self.num_heads // self.num_key_value_heads
        self.is_causal = True
        self.attention_dropout = config.attention_dropout
        self.rope_scaling = config.rope_scaling
        self.scaling = self.head_dim**-0.5

        if (self.head_dim * self.num_heads) != self.hidden_size:
            raise ValueError(
                f"hidden_size must be divisible by num_heads (got `hidden_size`: {self.hidden_size}"
                f" and `num_heads`: {self.num_heads})."
            )
        self.q_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=True)
        self.k_proj = nn.Linear(self.hidden_size, self.num_key_value_heads * self.head_dim, bias=True)
        self.v_proj = nn.Linear(self.hidden_size, self.num_key_value_heads * self.head_dim, bias=True)
        self.o_proj = nn.Linear(self.num_heads * self.head_dim, self.hidden_size, bias=False)
        self.sliding_window = config.sliding_window if config.layer_types[layer_idx] == "sliding_attention" else None

        self.rotary_emb = Qwen2_5_VLRotaryEmbedding(config=config)

    @deprecate_kwarg("past_key_value", new_name="past_key_values", version="4.58")
    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[Cache] = None,
        output_attentions: bool = False,
        use_cache: bool = False,
        cache_position: Optional[torch.LongTensor] = None,
        position_embeddings: Optional[tuple[torch.Tensor, torch.Tensor]] = None,  # necessary, but kept here for BC
        **kwargs: Unpack[FlashAttentionKwargs],
    ) -> tuple[torch.Tensor, Optional[torch.Tensor], Optional[tuple[torch.Tensor]]]:
        bsz, q_len, _ = hidden_states.size()

        query_states = self.q_proj(hidden_states)
        key_states = self.k_proj(hidden_states)
        value_states = self.v_proj(hidden_states)

        query_states = query_states.view(bsz, q_len, -1, self.head_dim).transpose(1, 2)
        key_states = key_states.view(bsz, q_len, -1, self.head_dim).transpose(1, 2)
        value_states = value_states.view(bsz, q_len, -1, self.head_dim).transpose(1, 2)

        cos, sin = position_embeddings
        query_states, key_states = apply_multimodal_rotary_pos_emb(
            query_states, key_states, cos, sin, self.rope_scaling["mrope_section"]
        )

        if past_key_values is not None:
            cache_kwargs = {"sin": sin, "cos": cos, "cache_position": cache_position}  # Specific to RoPE models
            key_states, value_states = past_key_values.update(key_states, value_states, self.layer_idx, cache_kwargs)

        attention_interface: Callable = eager_attention_forward
        if self.config._attn_implementation != "eager":
            attention_interface = ALL_ATTENTION_FUNCTIONS[self.config._attn_implementation]

        attn_output, attn_weights = attention_interface(
            self,
            query_states,
            key_states,
            value_states,
            attention_mask,
            dropout=0.0 if not self.training else self.attention_dropout,
            scaling=self.scaling,
            sliding_window=self.sliding_window,
            position_ids=position_ids,  # pass positions for FA2
            **kwargs,
        )

        attn_output = attn_output.reshape(bsz, q_len, -1).contiguous()
        attn_output = self.o_proj(attn_output)
        return attn_output, attn_weights


class Qwen2_5_VLDecoderLayer(GradientCheckpointingLayer):
    def __init__(self, config: Qwen2_5_VLTextConfig, layer_idx: int):
        super().__init__()
        self.hidden_size = config.hidden_size

        if config.use_sliding_window and config._attn_implementation != "flash_attention_2":
            logger.warning_once(
                f"Sliding Window Attention is enabled but not implemented for `{config._attn_implementation}`; "
                "unexpected results may be encountered."
            )
        self.self_attn = Qwen2_5_VLAttention(config, layer_idx)

        self.mlp = Qwen2MLP(config)
        self.input_layernorm = Qwen2RMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.post_attention_layernorm = Qwen2RMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.attention_type = config.layer_types[layer_idx]

    @deprecate_kwarg("past_key_value", new_name="past_key_values", version="4.58")
    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[tuple[torch.Tensor]] = None,
        output_attentions: Optional[bool] = False,
        use_cache: Optional[bool] = False,
        cache_position: Optional[torch.LongTensor] = None,
        position_embeddings: Optional[tuple[torch.Tensor, torch.Tensor]] = None,  # necessary, but kept here for BC
        **kwargs: Unpack[FlashAttentionKwargs],
    ) -> tuple[torch.FloatTensor, Optional[tuple[torch.FloatTensor, torch.FloatTensor]]]:
        """
        Args:
            hidden_states (`torch.FloatTensor`): input to the layer of shape `(batch, seq_len, embed_dim)`
            attention_mask (`torch.FloatTensor`, *optional*): attention mask of size
                `(batch, sequence_length)` where padding elements are indicated by 0.
            output_attentions (`bool`, *optional*):
                Whether or not to return the attentions tensors of all attention layers. See `attentions` under
                returned tensors for more detail.
            use_cache (`bool`, *optional*):
                If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding
                (see `past_key_values`).
            past_key_values (`Tuple(torch.FloatTensor)`, *optional*): cached past key and value projection states
            cache_position (`torch.LongTensor` of shape `(sequence_length)`, *optional*):
                Indices depicting the position of the input sequence tokens in the sequence.
            position_embeddings (`tuple[torch.FloatTensor, torch.FloatTensor]`, *optional*):
                Tuple containing the cosine and sine positional embeddings of shape `(batch_size, seq_len, head_dim)`,
                with `head_dim` being the embedding dimension of each attention head.
            kwargs (`dict`, *optional*):
                Arbitrary kwargs to be ignored, used for FSDP and other methods that injects code
                into the model
        """

        residual = hidden_states

        hidden_states = self.input_layernorm(hidden_states)

        # Self Attention
        hidden_states, self_attn_weights = self.self_attn(
            hidden_states=hidden_states,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_values=past_key_values,
            output_attentions=output_attentions,
            use_cache=use_cache,
            cache_position=cache_position,
            position_embeddings=position_embeddings,
            **kwargs,
        )
        hidden_states = residual + hidden_states

        # Fully Connected
        residual = hidden_states
        hidden_states = self.post_attention_layernorm(hidden_states)
        hidden_states = self.mlp(hidden_states)
        hidden_states = residual + hidden_states

        outputs = (hidden_states,)

        if output_attentions:
            outputs += (self_attn_weights,)

        return outputs


@auto_docstring
class Qwen2_5_VLTextModel(Qwen2_5_VLPreTrainedModel):
    config: Qwen2_5_VLTextConfig

    def __init__(self, config: Qwen2_5_VLTextConfig):
        super().__init__(config)
        self.padding_idx = config.pad_token_id
        self.vocab_size = config.vocab_size

        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)
        self.layers = nn.ModuleList(
            [Qwen2_5_VLDecoderLayer(config, layer_idx) for layer_idx in range(config.num_hidden_layers)]
        )
        self._attn_implementation = config._attn_implementation
        self.norm = Qwen2RMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.rotary_emb = Qwen2_5_VLRotaryEmbedding(config=config)
        self.has_sliding_layers = "sliding_attention" in self.config.layer_types

        self.gradient_checkpointing = False
        # Initialize weights and apply final processing
        self.post_init()

    @auto_docstring
    def forward(
        self,
        input_ids: Optional[torch.LongTensor] = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[Cache] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
        cache_position: Optional[torch.LongTensor] = None,
        **kwargs: Unpack[FlashAttentionKwargs],
    ) -> Union[tuple, BaseModelOutputWithPast]:
        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        use_cache = use_cache if use_cache is not None else self.config.use_cache

        return_dict = return_dict if return_dict is not None else self.config.use_return_dict

        if (input_ids is None) ^ (inputs_embeds is not None):
            raise ValueError("You must specify exactly one of input_ids or inputs_embeds")

        if self.gradient_checkpointing and self.training:
            if use_cache:
                logger.warning_once(
                    "`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`..."
                )
                use_cache = False

        # torch.jit.trace() doesn't support cache objects in the output
        if use_cache and past_key_values is None:
            past_key_values = DynamicCache(config=self.config)

        if inputs_embeds is None:
            inputs_embeds = self.embed_tokens(input_ids)

        if cache_position is None:
            if past_key_values is not None:
                # For cache objects, get_seq_length() returns the current sequence length
                past_seen_tokens = past_key_values.get_seq_length()
            else:
                past_seen_tokens = 0
            cache_position = torch.arange(
                past_seen_tokens, past_seen_tokens + inputs_embeds.shape[1], device=inputs_embeds.device
            )

        # the hard coded `3` is for temporal, height and width.
        if position_ids is None:
            position_ids = cache_position.view(1, 1, -1).expand(3, inputs_embeds.shape[0], -1)
        elif position_ids.ndim == 2:
            position_ids = position_ids[None, ...].expand(3, position_ids.shape[0], -1)

        # NOTE: we need to pass text position ids for packing. Qwen2-VL uses 3D positions
        # where each dim indicates visual spatial positions for temporal/height/width grids.
        # There are two scenarios when FA2-like packed masking might be activated.
        # 1. User specifically passed packed `position_ids` and no attention mask.
        #    In this case we expect the useer to create correct position ids for all 3 grids
        #    and prepend text-only position ids to it. The final tensor will be [4, bs, seq-len]
        # 2. User runs forward with no attention mask and no position ids. In this case, position ids
        #    are prepared by the model (`get_rope_index`) as `[4, bs, seq-len]` tensor. Text-only positions are
        #    prepended by us when creating positions so that the mask is constructed correctly. NOTE: failing to pass
        #    text-only positions will cause incorrect mask construction, do not change `prepare_input_for_generation`
        if position_ids.ndim == 3 and position_ids.shape[0] == 4:
            text_position_ids = position_ids[0]
            position_ids = position_ids[1:]
        else:
            text_position_ids = position_ids[0]

        # It may already have been prepared by e.g. `generate`
        if not isinstance(causal_mask_mapping := attention_mask, dict):
            # Prepare mask arguments
            mask_kwargs = {
                "config": self.config,
                "input_embeds": inputs_embeds,
                "attention_mask": attention_mask,
                "cache_position": cache_position,
                "past_key_values": past_key_values,
                "position_ids": text_position_ids,
            }
            # Create the masks
            causal_mask_mapping = {
                "full_attention": create_causal_mask(**mask_kwargs),
            }
            # The sliding window alternating layers are not always activated depending on the config
            if self.has_sliding_layers:
                causal_mask_mapping["sliding_attention"] = create_sliding_window_causal_mask(**mask_kwargs)

        hidden_states = inputs_embeds

        # create position embeddings to be shared across the decoder layers
        position_embeddings = self.rotary_emb(hidden_states, position_ids)

        # decoder layers
        all_hidden_states = () if output_hidden_states else None
        all_self_attns = () if output_attentions else None

        for decoder_layer in self.layers:
            if output_hidden_states:
                all_hidden_states += (hidden_states,)

            layer_outputs = decoder_layer(
                hidden_states,
                attention_mask=causal_mask_mapping[decoder_layer.attention_type],
                position_ids=text_position_ids,
                past_key_values=past_key_values,
                output_attentions=output_attentions,
                use_cache=use_cache,
                cache_position=cache_position,
                position_embeddings=position_embeddings,
                **kwargs,
            )

            hidden_states = layer_outputs[0]

            if output_attentions:
                all_self_attns += (layer_outputs[1],)

        hidden_states = self.norm(hidden_states)

        # add hidden states from the last decoder layer
        if output_hidden_states:
            all_hidden_states += (hidden_states,)

        if not return_dict:
            return tuple(
                v for v in [hidden_states, past_key_values, all_hidden_states, all_self_attns] if v is not None
            )
        return BaseModelOutputWithPast(
            last_hidden_state=hidden_states,
            past_key_values=past_key_values,
            hidden_states=all_hidden_states,
            attentions=all_self_attns,
        )


@auto_docstring
class Qwen2_5_VLModel(Qwen2_5_VLPreTrainedModel):
    """
    Qwen2.5-VL多模态模型的核心类，整合视觉编码器和语言模型。
    
    该类负责：
    1. 管理视觉编码器（visual）和语言模型（language_model）
    2. 处理图像和视频的特征提取
    3. 计算3D RoPE位置编码
    4. 融合多模态特征并生成统一的表示
    """
    base_model_prefix = ""  # 基础模型前缀，用于权重加载
    _checkpoint_conversion_mapping = {"^model": "language_model"}  # 检查点转换映射
    config: Qwen2_5_VLConfig  # 模型配置
    _no_split_modules = ["Qwen2_5_VLDecoderLayer", "Qwen2_5_VLVisionBlock"]  # 不可分割的模块列表

    def __init__(self, config):
        """
        初始化Qwen2.5-VL模型。
        
        Args:
            config (Qwen2_5_VLConfig): 模型配置，包含视觉和文本配置
        """
        super().__init__(config)
        # 初始化视觉编码器，用于处理图像和视频输入
        self.visual = Qwen2_5_VisionTransformerPretrainedModel._from_config(config.vision_config)
        # 初始化语言模型，用于文本理解和生成
        self.language_model = Qwen2_5_VLTextModel._from_config(config.text_config)
        # 缓存RoPE偏移量，用于优化解码阶段的位置计算
        self.rope_deltas = None  # 形状: (batch_size,)

        # 初始化权重并应用最终处理
        self.post_init()

    def get_input_embeddings(self):
        """获取语言模型的输入嵌入层。"""
        return self.language_model.get_input_embeddings()

    def set_input_embeddings(self, value):
        """设置语言模型的输入嵌入层。"""
        self.language_model.set_input_embeddings(value)

    def set_decoder(self, decoder):
        """设置语言模型解码器。"""
        self.language_model = decoder

    def get_decoder(self):
        """获取语言模型解码器。"""
        return self.language_model

    def get_rope_index(
        self,
        input_ids: Optional[torch.LongTensor] = None,
        image_grid_thw: Optional[torch.LongTensor] = None,
        video_grid_thw: Optional[torch.LongTensor] = None,
        second_per_grid_ts: Optional[torch.Tensor] = None,
        attention_mask: Optional[torch.Tensor] = None,
    ) -> tuple[torch.Tensor, torch.Tensor]:
        """
        Calculate the 3D rope index based on image and video's temporal, height and width in LLM.

        Explanation:
            Each embedding sequence contains vision embedding and text embedding or just contains text embedding.

            For pure text embedding sequence, the rotary position embedding has no difference with modern LLMs.
            Examples:
                input_ids: [T T T T T], here T is for text.
                temporal position_ids: [0, 1, 2, 3, 4]
                height position_ids: [0, 1, 2, 3, 4]
                width position_ids: [0, 1, 2, 3, 4]

            For vision and text embedding sequence, we calculate 3D rotary position embedding for vision part
            and 1D rotary position embedding for text part.
            Examples:
                Temporal (Time): 3 patches, representing different segments of the video in time.
                Height: 2 patches, dividing each frame vertically.
                Width: 2 patches, dividing each frame horizontally.
                We also have some important parameters:
                fps (Frames Per Second): The video's frame rate, set to 1. This means one frame is processed each second.
                tokens_per_second: This is a crucial parameter. It dictates how many "time-steps" or "temporal tokens" are conceptually packed into a one-second interval of the video. In this case, we have 25 tokens per second. So each second of the video will be represented with 25 separate time points. It essentially defines the temporal granularity.
                temporal_patch_size: The number of frames that compose one temporal patch. Here, it's 2 frames.
                interval: The step size for the temporal position IDs, calculated as tokens_per_second * temporal_patch_size / fps. In this case, 25 * 2 / 1 = 50. This means that each temporal patch will be have a difference of 50 in the temporal position IDs.
                input_ids: [V V V V V V V V V V V V T T T T T], here V is for vision.
                vision temporal position_ids: [0, 0, 0, 0, 50, 50, 50, 50, 100, 100, 100, 100]
                vision height position_ids: [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]
                vision width position_ids: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
                text temporal position_ids: [101, 102, 103, 104, 105]
                text height position_ids: [101, 102, 103, 104, 105]
                text width position_ids: [101, 102, 103, 104, 105]
                Here we calculate the text start position_ids as the max vision position_ids plus 1.

        Args:
            input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):
                Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
                it.
            image_grid_thw (`torch.LongTensor` of shape `(num_images, 3)`, *optional*):
                The temporal, height and width of feature shape of each image in LLM.
            video_grid_thw (`torch.LongTensor` of shape `(num_videos, 3)`, *optional*):
                The temporal, height and width of feature shape of each video in LLM.
            second_per_grid_ts (`torch.Tensor` of shape `(num_videos)`, *optional*):
                The time interval (in seconds) for each grid along the temporal dimension in the 3D position IDs.
            attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):
                Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:

                - 1 for tokens that are **not masked**,
                - 0 for tokens that are **masked**.

        Returns:
            position_ids (`torch.LongTensor` of shape `(3, batch_size, sequence_length)`)
            mrope_position_deltas (`torch.Tensor` of shape `(batch_size)`)
        """
        spatial_merge_size = self.config.vision_config.spatial_merge_size
        image_token_id = self.config.image_token_id
        video_token_id = self.config.video_token_id
        vision_start_token_id = self.config.vision_start_token_id
        mrope_position_deltas = []
        if input_ids is not None and (image_grid_thw is not None or video_grid_thw is not None):
            total_input_ids = input_ids
            if attention_mask is None:
                attention_mask = torch.ones_like(total_input_ids)
            position_ids = torch.ones(
                3,
                input_ids.shape[0],
                input_ids.shape[1],
                dtype=input_ids.dtype,
                device=input_ids.device,
            )
            image_index, video_index = 0, 0
            attention_mask = attention_mask.to(total_input_ids.device)
            for i, input_ids in enumerate(total_input_ids):
                input_ids = input_ids[attention_mask[i] == 1]
                image_nums, video_nums = 0, 0
                vision_start_indices = torch.argwhere(input_ids == vision_start_token_id).squeeze(1)
                vision_tokens = input_ids[vision_start_indices + 1]
                image_nums = (vision_tokens == image_token_id).sum()
                video_nums = (vision_tokens == video_token_id).sum()
                input_tokens = input_ids.tolist()
                llm_pos_ids_list: list = []
                st = 0
                remain_images, remain_videos = image_nums, video_nums
                for _ in range(image_nums + video_nums):
                    if image_token_id in input_tokens and remain_images > 0:
                        ed_image = input_tokens.index(image_token_id, st)
                    else:
                        ed_image = len(input_tokens) + 1
                    if video_token_id in input_tokens and remain_videos > 0:
                        ed_video = input_tokens.index(video_token_id, st)
                    else:
                        ed_video = len(input_tokens) + 1
                    if ed_image < ed_video:
                        t, h, w = (
                            image_grid_thw[image_index][0],
                            image_grid_thw[image_index][1],
                            image_grid_thw[image_index][2],
                        )
                        second_per_grid_t = 0
                        image_index += 1
                        remain_images -= 1
                        ed = ed_image

                    else:
                        t, h, w = (
                            video_grid_thw[video_index][0],
                            video_grid_thw[video_index][1],
                            video_grid_thw[video_index][2],
                        )
                        if second_per_grid_ts is not None:
                            second_per_grid_t = second_per_grid_ts[video_index]
                        else:
                            second_per_grid_t = 1.0
                        video_index += 1
                        remain_videos -= 1
                        ed = ed_video
                    llm_grid_t, llm_grid_h, llm_grid_w = (
                        t.item(),
                        h.item() // spatial_merge_size,
                        w.item() // spatial_merge_size,
                    )
                    text_len = ed - st

                    st_idx = llm_pos_ids_list[-1].max() + 1 if len(llm_pos_ids_list) > 0 else 0
                    llm_pos_ids_list.append(torch.arange(text_len).view(1, -1).expand(3, -1) + st_idx)

                    range_tensor = torch.arange(llm_grid_t).view(-1, 1)
                    expanded_range = range_tensor.expand(-1, llm_grid_h * llm_grid_w)

                    ## normalize type, send to device.
                    second_per_grid_t = torch.as_tensor(
                        second_per_grid_t, dtype=range_tensor.dtype, device=range_tensor.device
                    )

                    time_tensor = expanded_range * second_per_grid_t * self.config.vision_config.tokens_per_second

                    time_tensor_long = time_tensor.long()
                    t_index = time_tensor_long.flatten()

                    h_index = torch.arange(llm_grid_h).view(1, -1, 1).expand(llm_grid_t, -1, llm_grid_w).flatten()
                    w_index = torch.arange(llm_grid_w).view(1, 1, -1).expand(llm_grid_t, llm_grid_h, -1).flatten()
                    llm_pos_ids_list.append(torch.stack([t_index, h_index, w_index]) + text_len + st_idx)
                    st = ed + llm_grid_t * llm_grid_h * llm_grid_w

                if st < len(input_tokens):
                    st_idx = llm_pos_ids_list[-1].max() + 1 if len(llm_pos_ids_list) > 0 else 0
                    text_len = len(input_tokens) - st
                    llm_pos_ids_list.append(torch.arange(text_len).view(1, -1).expand(3, -1) + st_idx)

                llm_positions = torch.cat(llm_pos_ids_list, dim=1).reshape(3, -1)
                position_ids[..., i, attention_mask[i] == 1] = llm_positions.to(position_ids.device)
                mrope_position_deltas.append(llm_positions.max() + 1 - len(total_input_ids[i]))
            mrope_position_deltas = torch.tensor(mrope_position_deltas, device=input_ids.device).unsqueeze(1)
            return position_ids, mrope_position_deltas
        else:
            if attention_mask is not None:
                position_ids = attention_mask.long().cumsum(-1) - 1
                position_ids.masked_fill_(attention_mask == 0, 1)
                position_ids = position_ids.unsqueeze(0).expand(3, -1, -1).to(attention_mask.device)
                max_position_ids = position_ids.max(0, keepdim=False)[0].max(-1, keepdim=True)[0]
                mrope_position_deltas = max_position_ids + 1 - attention_mask.shape[-1]
            else:
                position_ids = (
                    torch.arange(input_ids.shape[1], device=input_ids.device)
                    .view(1, 1, -1)
                    .expand(3, input_ids.shape[0], -1)
                )
                mrope_position_deltas = torch.zeros(
                    [input_ids.shape[0], 1],
                    device=input_ids.device,
                    dtype=input_ids.dtype,
                )

            return position_ids, mrope_position_deltas

    def get_video_features(
        self, pixel_values_videos: torch.FloatTensor, video_grid_thw: Optional[torch.LongTensor] = None
    ):
        """
        将视频编码为连续的嵌入向量，可以传递给语言模型。
        Encodes videos into continuous embeddings that can be forwarded to the language model.

        Args:
            pixel_values_videos (`torch.FloatTensor` of shape `(batch_size, num_channels, image_size, image_size)`):
                输入视频对应的张量。
                The tensors corresponding to the input videos.
            video_grid_thw (`torch.LongTensor` of shape `(num_videos, 3)`, *optional*):
                每个视频在LLM中的时间、高度和宽度特征形状。
                The temporal, height and width of feature shape of each video in LLM.
        
        Returns:
            video_embeds: 分割后的视频嵌入向量列表，每个元素对应一个视频的特征
                         List of split video embeddings, each element corresponds to features of one video
        """
        # 将输入视频张量转换为视觉编码器的数据类型
        # Convert input video tensor to visual encoder's data type
        pixel_values_videos = pixel_values_videos.type(self.visual.dtype)
        
        # 通过视觉编码器处理视频，得到视频嵌入向量
        # Process videos through visual encoder to get video embeddings
        # video_embeds shape: (total_video_tokens, hidden_size)
        video_embeds = self.visual(pixel_values_videos, grid_thw=video_grid_thw)
        
        # 计算每个视频的分割大小：时间*高度*宽度 / 空间合并大小的平方
        # Calculate split size for each video: temporal*height*width / spatial_merge_size^2
        split_sizes = (video_grid_thw.prod(-1) // self.visual.spatial_merge_size**2).tolist()
        
        # 根据分割大小将视频嵌入向量分割为每个视频对应的部分
        # Split video embeddings according to split sizes for each video
        video_embeds = torch.split(video_embeds, split_sizes)
        return video_embeds

    def get_image_features(self, pixel_values: torch.FloatTensor, image_grid_thw: Optional[torch.LongTensor] = None):
        """
        将图像编码为连续的嵌入向量，可以传递给语言模型。
        Encodes images into continuous embeddings that can be forwarded to the language model.

        Args:
            pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, image_size, image_size)`):
                输入图像对应的张量。
                The tensors corresponding to the input images.
            image_grid_thw (`torch.LongTensor` of shape `(num_images, 3)`, *optional*):
                每个图像在LLM中的时间、高度和宽度特征形状。
                The temporal, height and width of feature shape of each image in LLM.
        
        Returns:
            image_embeds: 分割后的图像嵌入向量列表，每个元素对应一个图像的特征
                         List of split image embeddings, each element corresponds to features of one image
        """
        # 将输入图像张量转换为视觉编码器的数据类型
        # Convert input image tensor to visual encoder's data type
        pixel_values = pixel_values.type(self.visual.dtype)
        
        # 通过视觉编码器处理图像，得到图像嵌入向量
        # Process images through visual encoder to get image embeddings
        # image_embeds shape: (total_image_tokens, hidden_size)
        image_embeds = self.visual(pixel_values, grid_thw=image_grid_thw)
        
        # 计算每个图像的分割大小：时间*高度*宽度 / 空间合并大小的平方
        # Calculate split size for each image: temporal*height*width / spatial_merge_size^2
        split_sizes = (image_grid_thw.prod(-1) // self.visual.spatial_merge_size**2).tolist()
        
        # 根据分割大小将图像嵌入向量分割为每个图像对应的部分
        # Split image embeddings according to split sizes for each image
        image_embeds = torch.split(image_embeds, split_sizes)
        return image_embeds

    def get_placeholder_mask(
        self,
        input_ids: torch.LongTensor,
        inputs_embeds: torch.FloatTensor,
        image_features: torch.FloatTensor = None,
        video_features: torch.FloatTensor = None,
    ):
        """
        从 `input_ids` 或 `inputs_embeds` 中获取多模态占位符掩码，并检查占位符token数量是否等于多模态特征的长度。
        如果长度不匹配，将抛出错误。
        Obtains multimodal placeholdr mask from `input_ids` or `inputs_embeds`, and checks that the placeholder token count is
        equal to the length of multimodal features. If the lengths are different, an error is raised.
        
        Args:
            input_ids: 输入token序列，形状: (batch_size, sequence_length)
            inputs_embeds: 输入嵌入向量，形状: (batch_size, sequence_length, hidden_size)
            image_features: 图像特征，可选
            video_features: 视频特征，可选
        
        Returns:
            special_image_mask: 图像占位符掩码，形状: (batch_size, sequence_length, hidden_size)
            special_video_mask: 视频占位符掩码，形状: (batch_size, sequence_length, hidden_size)
        """
        # 如果没有提供input_ids，则从inputs_embeds中查找占位符
        # If input_ids is not provided, find placeholders from inputs_embeds
        if input_ids is None:
            # 通过比较嵌入向量与图像token嵌入来找到图像占位符位置
            # Find image placeholder positions by comparing embeddings with image token embedding
            special_image_mask = inputs_embeds == self.get_input_embeddings()(
                torch.tensor(self.config.image_token_id, dtype=torch.long, device=inputs_embeds.device)
            )
            special_image_mask = special_image_mask.all(-1)  # 在最后一个维度上进行all操作
            
            # 通过比较嵌入向量与视频token嵌入来找到视频占位符位置
            # Find video placeholder positions by comparing embeddings with video token embedding
            special_video_mask = inputs_embeds == self.get_input_embeddings()(
                torch.tensor(self.config.video_token_id, dtype=torch.long, device=inputs_embeds.device)
            )
            special_video_mask = special_video_mask.all(-1)  # 在最后一个维度上进行all操作
        else:
            # 直接从input_ids中查找图像和视频token的位置
            # Directly find image and video token positions from input_ids
            special_image_mask = input_ids == self.config.image_token_id
            special_video_mask = input_ids == self.config.video_token_id

        # 计算图像token的数量并扩展掩码维度以匹配inputs_embeds
        # Count image tokens and expand mask dimensions to match inputs_embeds
        n_image_tokens = special_image_mask.sum()
        special_image_mask = special_image_mask.unsqueeze(-1).expand_as(inputs_embeds).to(inputs_embeds.device)
        
        # 验证图像特征数量与图像token数量是否匹配
        # Validate that image features count matches image token count
        if image_features is not None and inputs_embeds[special_image_mask].numel() != image_features.numel():
            raise ValueError(
                f"Image features and image tokens do not match: tokens: {n_image_tokens}, features {image_features.shape[0]}"
            )

        # 计算视频token的数量并扩展掩码维度以匹配inputs_embeds
        # Count video tokens and expand mask dimensions to match inputs_embeds
        n_video_tokens = special_video_mask.sum()
        special_video_mask = special_video_mask.unsqueeze(-1).expand_as(inputs_embeds).to(inputs_embeds.device)
        
        # 验证视频特征数量与视频token数量是否匹配
        # Validate that video features count matches video token count
        if video_features is not None and inputs_embeds[special_video_mask].numel() != video_features.numel():
            raise ValueError(
                f"Videos features and video tokens do not match: tokens: {n_video_tokens}, features {video_features.shape[0]}"
            )

        return special_image_mask, special_video_mask

    @auto_docstring
    def forward(
        self,
        input_ids: torch.LongTensor = None,  # 输入token序列，形状: (batch_size, sequence_length)
        attention_mask: Optional[torch.Tensor] = None,  # 注意力掩码，形状: (batch_size, sequence_length)
        position_ids: Optional[torch.LongTensor] = None,  # 位置ID，形状: (3, batch_size, sequence_length) 或 (4, batch_size, sequence_length)
        past_key_values: Optional[Cache] = None,  # 缓存的键值对，用于加速生成
        inputs_embeds: Optional[torch.FloatTensor] = None,  # 输入嵌入，形状: (batch_size, sequence_length, hidden_size)
        use_cache: Optional[bool] = None,  # 是否使用缓存
        output_attentions: Optional[bool] = None,  # 是否输出注意力权重
        output_hidden_states: Optional[bool] = None,  # 是否输出隐藏状态
        return_dict: Optional[bool] = None,  # 是否返回字典格式
        pixel_values: Optional[torch.Tensor] = None,  # 图像像素值，形状: (num_images, channels, height, width)
        pixel_values_videos: Optional[torch.FloatTensor] = None,  # 视频像素值，形状: (num_videos, frames, channels, height, width)
        image_grid_thw: Optional[torch.LongTensor] = None,  # 图像网格时空尺寸，形状: (num_images, 3) [temporal, height, width]
        video_grid_thw: Optional[torch.LongTensor] = None,  # 视频网格时空尺寸，形状: (num_videos, 3) [temporal, height, width]
        rope_deltas: Optional[torch.LongTensor] = None,  # RoPE位置偏移量，形状: (batch_size,)
        cache_position: Optional[torch.LongTensor] = None,  # 缓存位置，形状: (sequence_length,)
        second_per_grid_ts: Optional[torch.Tensor] = None,  # 每个时间网格的秒数，形状: (num_videos,)
        **kwargs: Unpack[TransformersKwargs],
    ) -> Union[tuple, Qwen2_5_VLModelOutputWithPast]:
        r"""
        image_grid_thw (`torch.LongTensor` of shape `(num_images, 3)`, *optional*):
            The temporal, height and width of feature shape of each image in LLM.
        video_grid_thw (`torch.LongTensor` of shape `(num_videos, 3)`, *optional*):
            The temporal, height and width of feature shape of each video in LLM.
        rope_deltas (`torch.LongTensor` of shape `(batch_size, )`, *optional*):
            The rope index difference between sequence length and multimodal rope.
        second_per_grid_ts (`torch.Tensor` of shape `(num_videos)`, *optional*):
            The time interval (in seconds) for each grid along the temporal dimension in the 3D position IDs.
        """

        # 设置输出配置参数
        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        return_dict = return_dict if return_dict is not None else self.config.use_return_dict

        # 如果外部已提供rope_deltas，则优先保存以复用（例如由prepare_inputs_for_generation预先计算）
        if rope_deltas is not None:
            self.rope_deltas = rope_deltas

        # 如果没有提供输入嵌入，则从input_ids生成
        # inputs_embeds: (batch_size, sequence_length, hidden_size)
        if inputs_embeds is None:
            inputs_embeds = self.get_input_embeddings()(input_ids)

        # 当inputs_embeds已在外部（如prepare_inputs_for_generation）完成多模态融合时，跳过本地图像/视频重复处理
        multimodal_pre_fused = (input_ids is None) and (inputs_embeds is not None)
        if multimodal_pre_fused and position_ids is None and (pixel_values is not None or pixel_values_videos is not None):
            # 预融合且存在像素输入时必须显式提供position_ids，否则无法在此处可靠重建多模态位置编码
            raise ValueError(
                "When providing pre-fused inputs_embeds (input_ids is None), position_ids must also be provided."
            )

        # 处理图像输入（仅在未预融合的情况下进行，以避免重复处理和错误依赖input_ids）
        if (not multimodal_pre_fused) and (pixel_values is not None):
            # 获取图像特征，每个图像返回一个特征张量列表
            # image_embeds: List[torch.Tensor], 每个元素形状为 (image_tokens, hidden_size)
            image_embeds = self.get_image_features(pixel_values, image_grid_thw)
            # 将所有图像特征拼接成一个张量
            # image_embeds: (total_image_tokens, hidden_size)
            image_embeds = torch.cat(image_embeds, dim=0).to(inputs_embeds.device, inputs_embeds.dtype)
            # 获取图像占位符掩码，用于定位图像token在序列中的位置
            # image_mask: (batch_size, sequence_length, hidden_size)
            image_mask, _ = self.get_placeholder_mask(
                input_ids, inputs_embeds=inputs_embeds, image_features=image_embeds
            )
            # 将图像特征嵌入到对应的占位符位置
            # inputs_embeds: (batch_size, sequence_length, hidden_size)
            inputs_embeds = inputs_embeds.masked_scatter(image_mask, image_embeds)

        # 处理视频输入（仅在未预融合的情况下进行）
        if (not multimodal_pre_fused) and (pixel_values_videos is not None):
            # 获取视频特征，每个视频返回一个特征张量列表
            # video_embeds: List[torch.Tensor], 每个元素形状为 (video_tokens, hidden_size)
            video_embeds = self.get_video_features(pixel_values_videos, video_grid_thw)
            # 将所有视频特征拼接成一个张量
            # video_embeds: (total_video_tokens, hidden_size)
            video_embeds = torch.cat(video_embeds, dim=0).to(inputs_embeds.device, inputs_embeds.dtype)
            # 获取视频占位符掩码，用于定位视频token在序列中的位置
            # video_mask: (batch_size, sequence_length, hidden_size)
            _, video_mask = self.get_placeholder_mask(
                input_ids, inputs_embeds=inputs_embeds, video_features=video_embeds
            )
            # 将视频特征嵌入到对应的占位符位置
            # inputs_embeds: (batch_size, sequence_length, hidden_size)
            inputs_embeds = inputs_embeds.masked_scatter(video_mask, video_embeds)

        # 计算位置ID和RoPE偏移量
        if position_ids is None:
            # 在预填充阶段只计算一次RoPE索引
            # 编译时无法检查张量值，因此只检查输入长度
            # 可以安全地假设 length!=1 意味着我们处于预填充阶段，因为编译模型目前无法进行辅助解码
            prefill_compiled_stage = is_torchdynamo_compiling() and (
                (input_ids is not None and input_ids.shape[1] != 1)
                or (inputs_embeds is not None and inputs_embeds.shape[1] != 1)
            )
            prefill_noncompiled_stage = not is_torchdynamo_compiling() and (
                (cache_position is not None and cache_position[0] == 0)
                or (past_key_values is None or past_key_values.get_seq_length() == 0)
            )
            # 如果是预填充阶段或者还没有计算过rope_deltas，则重新计算
            if (prefill_compiled_stage or prefill_noncompiled_stage) or self.rope_deltas is None:
                if multimodal_pre_fused:
                    # 在预融合场景下，此分支不可达（上方已强制要求显式传入position_ids）
                    raise RuntimeError("position_ids should be provided when inputs_embeds are pre-fused.")
                # 计算3D位置ID和RoPE偏移量
                # position_ids: (4, batch_size, sequence_length) - 包含文本位置和3D视觉位置
                # rope_deltas: (batch_size,) - 序列长度与多模态RoPE之间的索引差异
                position_ids, rope_deltas = self.get_rope_index(
                    input_ids,
                    image_grid_thw,
                    video_grid_thw,
                    second_per_grid_ts=second_per_grid_ts,
                    attention_mask=attention_mask,
                )
                self.rope_deltas = rope_deltas
            else:
                # 解码阶段：使用缓存的rope_deltas计算4D位置ID [text; 3D vision]
                batch_size, seq_length, _ = inputs_embeds.shape
                device = inputs_embeds.device
                # 当前文本起始位置（按步推进）
                if cache_position is not None:
                    current_pos_base = int(cache_position[0].item())
                elif past_key_values is not None:
                    current_pos_base = past_key_values.get_seq_length()
                else:
                    current_pos_base = 0
                # 文本位置 [1, batch, seq_len]
                text_pos_base = torch.arange(seq_length, device=device).view(1, 1, -1) + current_pos_base
                text_positions = text_pos_base.expand(1, batch_size, -1)
                # 视觉3D位置 [3, batch, seq_len]
                if self.rope_deltas is not None:
                    rope_deltas = self.rope_deltas.to(device)
                    if rope_deltas.dim() == 0:
                        rope_deltas = rope_deltas.view(1)
                    if rope_deltas.shape[0] != batch_size:
                        if rope_deltas.shape[0] == 1:
                            rope_deltas = rope_deltas.repeat(batch_size)
                        elif batch_size % rope_deltas.shape[0] == 0:
                            rope_deltas = rope_deltas.repeat_interleave(batch_size // rope_deltas.shape[0], dim=0)
                        else:
                            if rope_deltas.shape[0] > batch_size:
                                rope_deltas = rope_deltas[:batch_size]
                            else:
                                repeat_n = (batch_size + rope_deltas.shape[0] - 1) // rope_deltas.shape[0]
                                rope_deltas = rope_deltas.repeat(repeat_n)[:batch_size]
                    vision_pos_value = current_pos_base + torch.arange(seq_length, device=device).view(1, -1)
                    vision_pos_value = vision_pos_value + rope_deltas.view(-1, 1)
                    vision_positions = vision_pos_value.unsqueeze(0).expand(3, -1, -1)
                else:
                    vision_positions = text_positions.expand(3, -1, -1)
                # 拼接成4D位置编码 [4, batch, seq_len]
                position_ids = torch.cat([text_positions, vision_positions], dim=0)

        # 调用语言模型进行前向传播
        # 注意：这里传入的是融合了多模态特征的inputs_embeds，而不是原始的input_ids
        outputs = self.language_model(
            input_ids=None,  # 不使用原始token ID，而是使用嵌入
            position_ids=position_ids,  # 3D或4D位置ID: (3|4, batch_size, sequence_length)
            attention_mask=attention_mask,  # 注意力掩码: (batch_size, sequence_length)
            past_key_values=past_key_values,  # 缓存的键值对
            inputs_embeds=inputs_embeds,  # 融合多模态特征的嵌入: (batch_size, sequence_length, hidden_size)
            use_cache=use_cache,  # 是否使用缓存
            output_attentions=output_attentions,  # 是否输出注意力权重
            output_hidden_states=output_hidden_states,  # 是否输出隐藏状态
            return_dict=True,  # 强制返回字典格式
            cache_position=cache_position,  # 缓存位置: (sequence_length,)
            **kwargs,
        )

        # 构造输出对象
        output = Qwen2_5_VLModelOutputWithPast(
            last_hidden_state=outputs.last_hidden_state,  # 最后一层隐藏状态: (batch_size, sequence_length, hidden_size)
            past_key_values=outputs.past_key_values,  # 更新后的键值对缓存
            hidden_states=outputs.hidden_states,  # 所有层的隐藏状态 (如果output_hidden_states=True)
            attentions=outputs.attentions,  # 所有层的注意力权重 (如果output_attentions=True)
            rope_deltas=self.rope_deltas,  # RoPE偏移量: (batch_size,)
        )
        return output if return_dict else output.to_tuple()


@dataclass
@auto_docstring(
    custom_intro="""
    Base class for Qwen2_5_VL causal language model (or autoregressive) outputs.
    """
)
class Qwen2_5_VLCausalLMOutputWithPast(ModelOutput):
    r"""
    loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels` is provided):
        Language modeling loss (for next-token prediction).
    logits (`torch.FloatTensor` of shape `(batch_size, sequence_length, config.vocab_size)`):
        Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).
    past_key_values (`Cache`, *optional*, returned when `use_cache=True` is passed or when `config.use_cache=True`):
        Tuple of `tuple(torch.FloatTensor)` of length `config.n_layers`, with each tuple having 2 tensors of shape
        `(batch_size, num_heads, sequence_length, embed_size_per_head)`)

        Contains pre-computed hidden-states (key and values in the self-attention blocks) that can be used (see
        `past_key_values` input) to speed up sequential decoding.
    rope_deltas (`torch.LongTensor` of shape `(batch_size, )`, *optional*):
        The rope index difference between sequence length and multimodal rope.
    """

    loss: Optional[torch.FloatTensor] = None
    logits: Optional[torch.FloatTensor] = None
    past_key_values: Optional[list[torch.FloatTensor]] = None
    hidden_states: Optional[tuple[torch.FloatTensor]] = None
    attentions: Optional[tuple[torch.FloatTensor]] = None
    rope_deltas: Optional[torch.LongTensor] = None


class Qwen2_5_VLForConditionalGeneration(Qwen2_5_VLPreTrainedModel, GenerationMixin):
    _checkpoint_conversion_mapping = {
        "^visual": "model.visual",
        r"^model(?!\.(language_model|visual))": "model.language_model",
    }
    _tied_weights_keys = ["lm_head.weight"]

    def __init__(self, config):
        super().__init__(config)
        self.model = Qwen2_5_VLModel(config)
        self.lm_head = nn.Linear(config.text_config.hidden_size, config.text_config.vocab_size, bias=False)

        self.post_init()

    def get_input_embeddings(self):
        return self.model.get_input_embeddings()

    def set_input_embeddings(self, value):
        self.model.set_input_embeddings(value)

    def set_decoder(self, decoder):
        self.model.set_decoder(decoder)

    def get_decoder(self):
        return self.model.get_decoder()

    def get_video_features(
        self, pixel_values_videos: torch.FloatTensor, video_grid_thw: Optional[torch.LongTensor] = None
    ):
        return self.model.get_video_features(pixel_values_videos, video_grid_thw)

    def get_image_features(self, pixel_values: torch.FloatTensor, image_grid_thw: Optional[torch.LongTensor] = None):
        return self.model.get_image_features(pixel_values, image_grid_thw)

    # Make modules available throught conditional class for BC
    @property
    def language_model(self):
        return self.model.language_model

    @property
    def visual(self):
        return self.model.visual

    @can_return_tuple
    @auto_docstring
    def forward(
        self,
        input_ids: torch.LongTensor = None,  # 输入token序列，形状: (batch_size, sequence_length)
        attention_mask: Optional[torch.Tensor] = None,  # 注意力掩码，形状: (batch_size, sequence_length)
        position_ids: Optional[torch.LongTensor] = None,  # 位置ID，形状: (3, batch_size, sequence_length) 或 (4, batch_size, sequence_length)
        past_key_values: Optional[Cache] = None,  # 缓存的键值对，用于加速生成
        inputs_embeds: Optional[torch.FloatTensor] = None,  # 输入嵌入，形状: (batch_size, sequence_length, hidden_size)
        labels: Optional[torch.LongTensor] = None,  # 标签，用于计算损失，形状: (batch_size, sequence_length)
        use_cache: Optional[bool] = None,  # 是否使用缓存
        output_attentions: Optional[bool] = None,  # 是否输出注意力权重
        output_hidden_states: Optional[bool] = None,  # 是否输出隐藏状态
        pixel_values: Optional[torch.Tensor] = None,  # 图像像素值，形状: (num_images, channels, height, width)
        pixel_values_videos: Optional[torch.FloatTensor] = None,  # 视频像素值，形状: (num_videos, frames, channels, height, width)
        image_grid_thw: Optional[torch.LongTensor] = None,  # 图像网格时空尺寸，形状: (num_images, 3) [temporal, height, width]
        video_grid_thw: Optional[torch.LongTensor] = None,  # 视频网格时空尺寸，形状: (num_videos, 3) [temporal, height, width]
        rope_deltas: Optional[torch.LongTensor] = None,  # RoPE位置偏移量，形状: (batch_size,)
        cache_position: Optional[torch.LongTensor] = None,  # 缓存位置，形状: (sequence_length,)
        second_per_grid_ts: Optional[torch.Tensor] = None,  # 每个时间网格的秒数，形状: (num_videos,)
        logits_to_keep: Union[int, torch.Tensor] = 0,  # 保留的logits数量，用于优化内存
        **kwargs: Unpack[TransformersKwargs],
    ) -> Union[tuple, Qwen2_5_VLCausalLMOutputWithPast]:
        r"""
        labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):
            Labels for computing the masked language modeling loss. Indices should either be in `[0, ...,
            config.vocab_size]` or -100 (see `input_ids` docstring). Tokens with indices set to `-100` are ignored
            (masked), the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`.
        image_grid_thw (`torch.LongTensor` of shape `(num_images, 3)`, *optional*):
            The temporal, height and width of feature shape of each image in LLM.
        video_grid_thw (`torch.LongTensor` of shape `(num_videos, 3)`, *optional*):
            The temporal, height and width of feature shape of each video in LLM.
        rope_deltas (`torch.LongTensor` of shape `(batch_size, )`, *optional*):
            The rope index difference between sequence length and multimodal rope.
        second_per_grid_ts (`torch.Tensor` of shape `(num_videos)`, *optional*):
            The time interval (in seconds) for each grid along the temporal dimension in the 3D position IDs.

        Example:

        ```python
        >>> from PIL import Image
        >>> import requests
        >>> from transformers import AutoProcessor, Qwen2_5_VLForConditionalGeneration

        >>> model = Qwen2_5_VLForConditionalGeneration.from_pretrained("Qwen/Qwen2.5-VL-7B-Instruct")
        >>> processor = AutoProcessor.from_pretrained("Qwen/Qwen2.5-VL-7B-Instruct")

        >>> messages = [
            {
                "role": "user",
                "content": [
                    {"type": "image"},
                    {"type": "text", "text": "What is shown in this image?"},
                ],
            },
        ]
        >>> url = "https://www.ilankelman.org/stopsigns/australia.jpg"
        >>> image = Image.open(requests.get(url, stream=True).raw)

        >>> text = processor.apply_chat_template(messages, tokenize=False, add_generation_prompt=True)
        >>> inputs = processor(text=[text], images=[image], vision_infos=[vision_infos])

        >>> # Generate
        >>> generate_ids = model.generate(inputs.input_ids, max_length=30)
        >>> tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]
        "The image shows a street scene with a red stop sign in the foreground. In the background, there is a large red gate with Chinese characters ..."
        ```"""

        # 设置输出配置参数
        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )

        # 调用底层的Qwen2_5_VLModel进行多模态特征融合和语言建模
        outputs = self.model(
            input_ids=input_ids,  # 输入token序列: (batch_size, sequence_length)
            pixel_values=pixel_values,  # 图像像素值: (num_images, channels, height, width)
            pixel_values_videos=pixel_values_videos,  # 视频像素值: (num_videos, frames, channels, height, width)
            image_grid_thw=image_grid_thw,  # 图像网格尺寸: (num_images, 3)
            video_grid_thw=video_grid_thw,  # 视频网格尺寸: (num_videos, 3)
            second_per_grid_ts=second_per_grid_ts,  # 时间网格间隔: (num_videos,)
            position_ids=position_ids,  # 位置ID: (3, batch_size, sequence_length) 或 (4, batch_size, sequence_length)
            attention_mask=attention_mask,  # 注意力掩码: (batch_size, sequence_length)
            past_key_values=past_key_values,  # 缓存的键值对
            inputs_embeds=inputs_embeds,  # 输入嵌入: (batch_size, sequence_length, hidden_size)
            use_cache=use_cache,  # 是否使用缓存
            output_attentions=output_attentions,  # 是否输出注意力权重
            output_hidden_states=output_hidden_states,  # 是否输出隐藏状态
            return_dict=True,  # 强制返回字典格式
            cache_position=cache_position,  # 缓存位置: (sequence_length,)
            **kwargs,
        )

        # 获取最后一层的隐藏状态
        # hidden_states: (batch_size, sequence_length, hidden_size)
        hidden_states = outputs[0]

        # 只计算必要的logits，如果不计算损失则不将其上转换为float类型以节省内存
        # 这是一个内存优化技巧，只对序列的最后几个位置计算logits
        slice_indices = slice(-logits_to_keep, None) if isinstance(logits_to_keep, int) else logits_to_keep
        # 通过语言模型头部计算词汇表上的logits
        # logits: (batch_size, logits_to_keep, vocab_size)
        logits = self.lm_head(hidden_states[:, slice_indices, :])

        # 计算损失（如果提供了标签）
        loss = None
        if labels is not None:
            # 计算交叉熵损失
            # loss: (1,) 标量张量
            loss = self.loss_function(logits=logits, labels=labels, vocab_size=self.config.vocab_size)

        # 返回包含损失、logits和其他输出的结果
        return Qwen2_5_VLCausalLMOutputWithPast(
            loss=loss,  # 语言建模损失: (1,) 或 None
            logits=logits,  # 预测logits: (batch_size, logits_to_keep, vocab_size)
            past_key_values=outputs.past_key_values,  # 更新后的键值对缓存
            hidden_states=outputs.hidden_states,  # 所有层的隐藏状态 (如果output_hidden_states=True)
            attentions=outputs.attentions,  # 所有层的注意力权重 (如果output_attentions=True)
            rope_deltas=outputs.rope_deltas,  # RoPE偏移量: (batch_size,)
        )

    def prepare_inputs_for_generation(
        self,
        input_ids,
        past_key_values=None,
        attention_mask=None,
        inputs_embeds=None,
        cache_position=None,
        position_ids=None,
        use_cache=True,
        pixel_values=None,
        pixel_values_videos=None,
        image_grid_thw=None,
        video_grid_thw=None,
        second_per_grid_ts=None,
        **kwargs,
    ):
        """
        为生成阶段准备输入，特别处理多模态输入和RoPE位置编码。
        现在预先计算多模态特征嵌入以支持torch.compile优化。
        Prepare inputs for generation, with special handling for multimodal inputs and RoPE position encoding.
        Now pre-computes multimodal feature embeddings to support torch.compile optimization.
        
        Args:
            input_ids: 输入token序列，形状: (batch_size, sequence_length)
            past_key_values: 缓存的键值对，用于加速生成
            attention_mask: 注意力掩码，形状: (batch_size, sequence_length)
            inputs_embeds: 输入嵌入向量，形状: (batch_size, sequence_length, hidden_size)
            cache_position: 缓存位置信息
            position_ids: 位置编码ID
            use_cache: 是否使用缓存
            pixel_values: 图像像素值
            pixel_values_videos: 视频像素值
            image_grid_thw: 图像网格的时间、高度、宽度信息
            video_grid_thw: 视频网格的时间、高度、宽度信息
            second_per_grid_ts: 每个网格的时间间隔
        
        Returns:
            model_inputs: 准备好的模型输入字典，包含预计算的inputs_embeds
        """
        # 重写父类方法 -- 在特定情况下我们不希望将图像输入传递给模型
        # Overwritten -- in specific circumstances we don't want to forward image inputs to the model

        # 调用父类方法获取基础的模型输入
        # Call parent method to get basic model inputs
        model_inputs = super().prepare_inputs_for_generation(
            input_ids,
            past_key_values=past_key_values,
            attention_mask=attention_mask,
            inputs_embeds=inputs_embeds,
            cache_position=cache_position,
            position_ids=position_ids,
            pixel_values=pixel_values,
            pixel_values_videos=pixel_values_videos,
            image_grid_thw=image_grid_thw,
            video_grid_thw=video_grid_thw,
            second_per_grid_ts=second_per_grid_ts,
            use_cache=use_cache,
            **kwargs,
        )

        # 确定batch_size, device和dtype
        # Determine batch size, device and dtype
        if inputs_embeds is not None:
            bs = inputs_embeds.shape[0]
            device = inputs_embeds.device
            dtype = inputs_embeds.dtype
        elif model_inputs.get("inputs_embeds") is not None:
            emb = model_inputs["inputs_embeds"]
            bs = emb.shape[0]
            device = emb.device
            dtype = emb.dtype
        else:
            # Prefer local input_ids, otherwise fall back to the one returned by parent
            ids = input_ids if input_ids is not None else model_inputs.get("input_ids")
            bs = ids.shape[0]
            device = ids.device
            dtype = self.model.get_input_embeddings().weight.dtype

        # Ensure StaticCache is used by default when caching during generation
        if use_cache and model_inputs.get("past_key_values") is None:
            max_cache_len = getattr(self.config, "max_position_embeddings", 32768)
            model_inputs["past_key_values"] = StaticCache(
                config=self.config,
                max_batch_size=bs,
                max_cache_len=max_cache_len,
                device=device,
                dtype=dtype,
            )

        # 预计算多模态特征嵌入（在预填充阶段或有视觉输入时）
        # Pre-compute multimodal feature embeddings (during prefill or when visual inputs are present)
        is_prefill = cache_position is not None and cache_position[0] == 0
        has_visual_inputs = pixel_values is not None or pixel_values_videos is not None
        
        if is_prefill and has_visual_inputs and inputs_embeds is None:
            # 从input_ids生成基础嵌入
            # Generate base embeddings from input_ids
            target_input_ids = input_ids if input_ids is not None else model_inputs.get("input_ids")
            if target_input_ids is not None:
                inputs_embeds = self.model.get_input_embeddings()(target_input_ids)

                # 处理图像输入
                # Process image inputs
                if pixel_values is not None:
                    # 获取图像特征并融合到inputs_embeds中
                    # Get image features and fuse into inputs_embeds
                    image_embeds = self.model.get_image_features(pixel_values, image_grid_thw)
                    image_embeds = torch.cat(image_embeds, dim=0).to(inputs_embeds.device, inputs_embeds.dtype)
                    
                    # 获取图像占位符掩码并替换
                    # Get image placeholder mask and replace
                    image_mask, _ = self.model.get_placeholder_mask(
                        target_input_ids, inputs_embeds=inputs_embeds, image_features=image_embeds
                    )
                    inputs_embeds = inputs_embeds.masked_scatter(image_mask, image_embeds)

                # 处理视频输入
                # Process video inputs
                if pixel_values_videos is not None:
                    # 获取视频特征并融合到inputs_embeds中
                    # Get video features and fuse into inputs_embeds
                    video_embeds = self.model.get_video_features(pixel_values_videos, video_grid_thw)
                    video_embeds = torch.cat(video_embeds, dim=0).to(inputs_embeds.device, inputs_embeds.dtype)
                    
                    # 获取视频占位符掩码并替换
                    # Get video placeholder mask and replace
                    _, video_mask = self.model.get_placeholder_mask(
                        target_input_ids, inputs_embeds=inputs_embeds, video_features=video_embeds
                    )
                    inputs_embeds = inputs_embeds.masked_scatter(video_mask, video_embeds)

                # 将预计算的嵌入传递给模型
                # Pass pre-computed embeddings to model
                model_inputs["inputs_embeds"] = inputs_embeds
                model_inputs["input_ids"] = None  # 清除input_ids，使用inputs_embeds

        # Qwen2-5-VL的position_ids需要结合rope_deltas来准备
        # Qwen2-5-VL position_ids are prepared with rope_deltas
        if position_ids is None:
            # 仅在预填充阶段计算一次RoPE索引
            # 编译时无法检查张量值，因此只检查输入长度
            # 可以安全地假设 `length!=1` 意味着我们处于预填充阶段，因为编译模型目前无法进行辅助解码
            # Calculate RoPE index once per generation in the pre-fill stage only.
            # When compiling, we can't check tensor values thus we check only input length
            # It is safe to assume that `length!=1` means we're in pre-fill because compiled
            # models currently cannot do asssisted decoding
            if is_prefill or self.model.rope_deltas is None:
                # 计算视觉位置编码和RoPE偏移量
                # Calculate vision positions and RoPE deltas
                vision_positions, rope_deltas = self.model.get_rope_index(
                    model_inputs.get("input_ids", input_ids),
                    image_grid_thw=image_grid_thw,
                    video_grid_thw=video_grid_thw,
                    second_per_grid_ts=second_per_grid_ts,
                    attention_mask=attention_mask,
                )
                # 保存RoPE偏移量以供后续使用
                # Save RoPE deltas for subsequent use
                self.model.rope_deltas = rope_deltas
                
                # Concatenate "text + vision" positions into [4, bs, seq-len]
                if "position_ids" not in model_inputs:
                    if input_ids is not None:
                        text_positions = torch.arange(input_ids.shape[1], device=device)[None, None, :]
                    else:
                        target_input_ids = model_inputs.get("input_ids")
                        text_positions = torch.arange(target_input_ids.shape[1], device=device)[None, None, :]
                else:
                    text_positions = model_inputs["position_ids"][None, ...]
                model_inputs["position_ids"] = torch.cat([text_positions, vision_positions], dim=0)
            else:
                # 解码阶段：使用缓存的rope_deltas构造4D position_ids
                # Decoding stage: use cached rope_deltas to construct 4D position_ids
                
                # 获取当前步的文本位置
                # Get current step text position
                if cache_position is not None:
                    # 使用cache_position作为当前文本位置
                    # Use cache_position as current text position
                    current_pos = cache_position[0].item()
                    text_positions = torch.tensor([current_pos], device=device).unsqueeze(0).unsqueeze(0)  # [1, 1, 1]
                else:
                    # 从past_key_values推断当前位置
                    # Infer current position from past_key_values
                    if model_inputs.get("past_key_values") is not None:
                        current_pos = model_inputs["past_key_values"].get_seq_length()
                    else:
                        current_pos = 0
                    text_positions = torch.tensor([current_pos], device=device).unsqueeze(0).unsqueeze(0)  # [1, 1, 1]
                
                # 构造3D视觉位置：当前步位置 + rope_deltas
                # Construct 3D vision positions: current step position + rope_deltas
                if self.model.rope_deltas is not None:
                    # rope_deltas: normalize to shape (batch_size, 1)
                    rope_deltas = self.model.rope_deltas
                    if rope_deltas.dim() == 1:
                        rope_deltas = rope_deltas.unsqueeze(-1)
                    elif rope_deltas.dim() > 2:
                        rope_deltas = rope_deltas.squeeze(-1)
                    
                    # 确保rope_deltas与batch_size对齐
                    # Ensure rope_deltas aligns with batch_size
                    if rope_deltas.shape[0] != bs:
                        if rope_deltas.shape[0] == 1:
                            rope_deltas = rope_deltas.repeat(bs, 1)
                        else:
                            rope_deltas = rope_deltas.repeat_interleave(bs // rope_deltas.shape[0], dim=0)
                    
                    # 计算视觉位置：当前文本位置 + rope_deltas
                    # Calculate vision positions: current text position + rope_deltas
                    vision_pos_value = current_pos + rope_deltas  # (batch_size, 1)
                    
                    # 扩展为3D视觉维度 (temporal, height, width)
                    # Expand to 3D vision dimensions (temporal, height, width)
                    vision_positions = vision_pos_value.unsqueeze(0).expand(3, -1, -1)  # [3, batch_size, 1]
                else:
                    # 如果没有rope_deltas，使用当前位置作为视觉位置
                    # If no rope_deltas, use current position as vision position
                    vision_positions = text_positions.expand(3, bs, -1)  # [3, batch_size, 1]
                
                # 确保文本位置也与batch_size对齐
                # Ensure text positions also align with batch_size
                text_positions = text_positions.expand(1, bs, -1)  # [1, batch_size, 1]
                
                # 拼接成4D position_ids: [text; 3D vision]
                # Concatenate into 4D position_ids: [text; 3D vision]
                model_inputs["position_ids"] = torch.cat([text_positions, vision_positions], dim=0)  # [4, batch_size, 1]

        # 在解码阶段清除视觉输入以避免重复处理
        # Clear visual inputs during decoding to avoid reprocessing
        if not is_prefill:
            model_inputs["pixel_values"] = None
            model_inputs["pixel_values_videos"] = None

        return model_inputs

    def _get_image_nums_and_video_nums(
        self,
        input_ids: Optional[torch.LongTensor],
        inputs_embeds: Optional[torch.Tensor] = None,
    ) -> tuple[torch.Tensor, torch.Tensor]:
        """
        获取每个样本中图像和视频的数量，用于计算样本张量的分离长度。
        这些参数不通过处理器传递，以避免接口修改带来的不可预测影响。
        Get the number of images and videos for each sample to calculate the separation length of the sample tensor.
        These parameters are not passed through the processor to avoid unpredictable impacts from interface modifications.

        Args:
            input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):
                词汇表中输入序列token的索引。
                Indices of input sequence tokens in the vocabulary.
            inputs_embeds: 输入嵌入向量，可选

        Returns:
            image_nums (`torch.LongTensor` of shape `(batch_size,)`):
                每个样本中的图像数量
                Number of images in each sample
            video_nums (`torch.LongTensor` of shape `(batch_size,)`):
                每个样本中的视频数量
                Number of videos in each sample
        """
        # 获取配置中的特殊token ID
        # Get special token IDs from config
        image_token_id = self.config.image_token_id
        video_token_id = self.config.video_token_id
        vision_start_token_id = self.config.vision_start_token_id

        # 如果提供了嵌入向量，从嵌入向量中查找特殊token
        # If embeddings are provided, find special tokens from embeddings
        if inputs_embeds is not None:
            # 查找视觉开始token的位置
            # Find vision start token positions
            vision_start_mask = (
                inputs_embeds
                == self.get_input_embeddings()(
                    torch.tensor(vision_start_token_id, dtype=torch.long, device=inputs_embeds.device)
                )
            )[..., 0]  # 取第一个维度，形状: (batch_size, sequence_length)
            
            # 查找图像token的位置
            # Find image token positions
            image_mask = (
                inputs_embeds
                == self.get_input_embeddings()(
                    torch.tensor(image_token_id, dtype=torch.long, device=inputs_embeds.device)
                )
            )[..., 0]  # 形状: (batch_size, sequence_length)
            
            # 查找视频token的位置
            # Find video token positions
            video_mask = (
                inputs_embeds
                == self.get_input_embeddings()(
                    torch.tensor(video_token_id, dtype=torch.long, device=inputs_embeds.device)
                )
            )[..., 0]  # 形状: (batch_size, sequence_length)
        else:
            # 直接从input_ids中查找特殊token
            # Directly find special tokens from input_ids
            vision_start_mask = input_ids == vision_start_token_id
            image_mask = input_ids == image_token_id
            video_mask = input_ids == video_token_id

        # 将视觉开始掩码向右移动一位，以匹配紧跟在视觉开始token后的图像/视频token
        # Shift vision start mask right by one position to match image/video tokens following vision start token
        vision_first_mask = torch.roll(vision_start_mask, shifts=1, dims=1)
        
        # 计算每个样本中的图像数量：视觉开始token后紧跟图像token的数量
        # Count images in each sample: number of image tokens following vision start tokens
        image_nums = torch.sum(vision_first_mask & image_mask, dim=1)
        
        # 计算每个样本中的视频数量：视觉开始token后紧跟视频token的数量
        # Count videos in each sample: number of video tokens following vision start tokens
        video_nums = torch.sum(vision_first_mask & video_mask, dim=1)

        return image_nums, video_nums

    def _expand_inputs_for_generation(
        self,
        expand_size: int = 1,
        is_encoder_decoder: bool = False,
        input_ids: Optional[torch.LongTensor] = None,
        **model_kwargs,
    ) -> tuple[torch.LongTensor, dict[str, Any]]:
        # Overwritten -- Support for expanding tensors without a batch size dimension
        # e.g., pixel_values, image_grid_thw, pixel_values_videos, video_grid_thw, second_per_grid_t
        # pixel_values.shape[0] is sum(seqlen_images for samples)
        # image_grid_thw.shape[0] is sum(num_images for samples)

        if expand_size == 1:
            return input_ids, model_kwargs

        visual_keys = ["pixel_values", "image_grid_thw", "pixel_values_videos", "video_grid_thw", "second_per_grid_ts"]

        def _expand_dict_for_generation_visual(dict_to_expand):
            image_grid_thw = model_kwargs.get("image_grid_thw", None)
            video_grid_thw = model_kwargs.get("video_grid_thw", None)
            image_nums, video_nums = self._get_image_nums_and_video_nums(
                input_ids, inputs_embeds=model_kwargs.get("inputs_embeds", None)
            )

            def _repeat_interleave_samples(x, lengths, repeat_times):
                samples = torch.split(x, lengths)
                repeat_args = [repeat_times] + [1] * (x.dim() - 1)
                result = torch.cat([sample.repeat(*repeat_args) for sample in samples], dim=0)
                return result

            for key in dict_to_expand:
                if key == "pixel_values":
                    # split images into samples
                    samples = torch.split(image_grid_thw, list(image_nums))
                    # compute the sequence length of images for each sample
                    lengths = [torch.prod(sample, dim=1).sum() for sample in samples]
                    dict_to_expand[key] = _repeat_interleave_samples(
                        dict_to_expand[key], lengths=lengths, repeat_times=expand_size
                    )
                elif key == "image_grid_thw":
                    # get the num of images for each sample
                    lengths = list(image_nums)
                    dict_to_expand[key] = _repeat_interleave_samples(
                        dict_to_expand[key], lengths=lengths, repeat_times=expand_size
                    )
                elif key == "pixel_values_videos":
                    samples = torch.split(video_grid_thw, list(video_nums))
                    lengths = [torch.prod(sample, dim=1).sum() for sample in samples]
                    dict_to_expand[key] = _repeat_interleave_samples(
                        dict_to_expand[key], lengths=lengths, repeat_times=expand_size
                    )
                elif key == "video_grid_thw":
                    lengths = list(video_nums)
                    dict_to_expand[key] = _repeat_interleave_samples(
                        dict_to_expand[key], lengths=lengths, repeat_times=expand_size
                    )
                elif key == "second_per_grid_ts":
                    dict_to_expand[key] = _repeat_interleave_samples(
                        dict_to_expand[key], lengths=list(video_nums), repeat_times=expand_size
                    )
            return dict_to_expand

        def _expand_dict_for_generation(dict_to_expand):
            for key in dict_to_expand:
                if (
                    key != "cache_position"
                    and dict_to_expand[key] is not None
                    and isinstance(dict_to_expand[key], torch.Tensor)
                    and key not in visual_keys
                ):
                    dict_to_expand[key] = dict_to_expand[key].repeat_interleave(expand_size, dim=0)
            return dict_to_expand

        model_kwargs = _expand_dict_for_generation_visual(model_kwargs)

        if input_ids is not None:
            input_ids = input_ids.repeat_interleave(expand_size, dim=0)

        model_kwargs = _expand_dict_for_generation(model_kwargs)

        if is_encoder_decoder:
            if model_kwargs.get("encoder_outputs") is None:
                raise ValueError("If `is_encoder_decoder` is True, make sure that `encoder_outputs` is defined.")
            model_kwargs["encoder_outputs"] = _expand_dict_for_generation(model_kwargs["encoder_outputs"])

        return input_ids, model_kwargs


__all__ = ["Qwen2_5_VLForConditionalGeneration", "Qwen2_5_VLModel", "Qwen2_5_VLPreTrainedModel", "Qwen2_5_VLTextModel"]
